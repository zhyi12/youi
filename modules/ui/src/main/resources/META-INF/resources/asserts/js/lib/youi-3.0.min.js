/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(13);
	__webpack_require__(14);
	__webpack_require__(15);
	__webpack_require__(17);
	__webpack_require__(18);
	__webpack_require__(19);
	__webpack_require__(20);
	__webpack_require__(21);
	__webpack_require__(22);
	__webpack_require__(23);
	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(26);
	__webpack_require__(27);
	__webpack_require__(28);
	__webpack_require__(29);
	__webpack_require__(30);
	__webpack_require__(31);
	module.exports = __webpack_require__(32);


/***/ },
/* 1 */
/***/ function(module, exports) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */
	(function( $, undefined ) {
		'use strict';
		//
		window.require = window.require||function(){};
		
		$.youi = $.youi||{};//初始化组件空间
		
		$.extend($.youi,{
			version:'3.0.0',
			
			/**
			 * 服务配置
			 */
			serverConfig:{
				contextPath:'',//web上下文路径
				convertArray:[],//服务字典
				pageUrls:{}
			},
			/**
			 * 
			 */
			getMessage:function(source, params) {
				if ( arguments.length == 1 ) {
					return function() {
						var args = $.makeArray(arguments);
						args.unshift(source);
						return $.youi.getMessage.apply( this, args );
					};
				}
					
				if ( arguments.length > 2 && params.constructor != Array  ) {
					params = $.makeArray(arguments).slice(1);
				}
				if ( params.constructor != Array ) {
					params = [ params ];
				}
				$.each(params, function(i, n) {
					source = source.replace(new RegExp("\\{" + i + "\\}", "g"), ''+n);
				});
				return source;
			},
			//国际化资源
			resource:{
				
			},
			
			/**
			 * 文本信息资源工具
			 */
			resourceUtils:{
				get:function(key){
					var value = $.youi.resource[key];
					if(!value)return '';
					if($.isFunction(value)){
						return value(Array.prototype.slice.call( arguments, 1 ));
					}
					return value;
				}
			},
			
			timerUtils:{
				/**
				 * 计时器
				 */
				countdown:function(celem,interval,callback){
					var countdownFunc = _countdown(celem,interval,callback);
					//调用倒计时函数
					countdownFunc();
					
					function _countdown(elem,interval,callback){
						return function(){
							var value = $.trim(elem.text());
							var count = 0;
							if(!isNaN(value)){
								count = parseInt(value);
								count--;
							}
							
							if(count<=0){//如果当前count为0，退出计时
								if($.isFunction(callback)){
									callback();
									elem = null;
								}
							}else{
								//等待interval时间后调用倒计时函数
								elem.delay(interval).show(countdownFunc).text(count);
							}
						}
					}
				}
			},
			
			pageHashPrefix:'#p',
			/**
			 * 页面工具
			 */
			pageUtils:{
				/**
				 * 加载页面到指定的容器
				 */
				loadPage:function(pageContianer,pageUrl,after){
					$(this).addClass('loading');
					
					pageUrl = $.youi.serverConfig.contextPath+''+pageUrl;
					
					_showLoading(0,$.youi.resourceUtils.get('page.loading'));
					pageContianer.load(pageUrl,function(responseText,status,jqXhr){
						if(status==='error'){
							$(this).html(responseText);
						}else{
							if(jqXhr.getResponseHeader('X-LOGIN')=="true"){
								window.location.reload(true);
							}
							_hideLoading();
							$(this).removeClass('loading').addClass('loaded');
							if($.isFunction(after)){
								after.apply(this);
							}
						}
					});
				},
				
				/**
				 * 根据元素ID和页面ID查找页面元素
				 */
				element:function(elemId,pageId){
					var id = elemId;
					if(pageId){
						id ='P_'+ pageId+'_'+elemId;
					}
					return $('#'+id);
				},
				
				/**
				 * 执行页面函数 P_010104_init_page
				 */
				doPageFunc : function(funcName,pageId,pageDoc){
					var fullFuncName = 'P_'+pageId+'_'+funcName;
					
					if($.isFunction(window[fullFuncName])){
						return window[fullFuncName].apply(pageDoc,Array.prototype.slice.call( arguments, 3 ));
					}
					
				},
				
				/**
				 * 
				 */
				getWidgetPageHash:function(widgetElem){
					var pageHash = window.location.hash;
					if(pageHash){
						var pageHashs = pageHash.split('|');
						var index = widgetElem.parents('[data-hash]').length;
						return pageHashs[index]||'';
					}
				},
				/**
				 * 替换pageUrl中的参数
				 */
				parsePageUrl:function(pageUrl,paramObj){
					return $.youi.recordUtils.replaceByRecord(pageUrl,paramObj);
				},
				
				goPage:function(pageUrl){
					window.location.href = pageUrl;
				},
				//$.youi.pageUtils.goBackPage()
				goBackPage:function(){
					window.history.go(-1);
				},
				
				goForwardPage:function(){
					window.history.go(1);
				},
				
				getFuncUrls:function(pageId,urls){
					var funcUrls = {};
					
					if(urls&&$.youi.serverConfig.urls){
						var urlArr = urls.split(',');
						for(var i=0;i<urlArr.length;i++){
							if(urlArr[i]){
								var key = (pageId?("P_"+pageId+"_"):'')+urlArr[i];
								if($.youi.serverConfig.urls[key]){
									funcUrls[urlArr[i]] = $.youi.serverConfig.urls[key];
								}
							}
						}
					}
					return funcUrls;
				}
			},
			
			logLevel:1,//0(调试) 1（信息） 2(warn) 3(error)
			/**
			 * 日志
			 */
			log:{
				debug:function(msg){
					if($.youi.logLevel<1&&console){
						console.log(msg);
					}
				},
				info:function(msg){
					if($.youi.logLevel<2&&console){
						console.log(msg);
					}
				},
				error:function(msg){
					if($.youi.logLevel<3&&console){
						console.log(msg);
					}
				}
			},
			
			/**
			 * 组件工具
			 */
			widgetUtils:{
				/**
				 * 执行组件回调函数
				 */
				funcApply:function(widgetDom,funcName){
					var widgetId = widgetDom.getAttribute('id');
					if($.isFunction(window[widgetId+'_'+funcName])){
						var params = [];
						if ( arguments.length > 2){
							params = $.makeArray(arguments).slice(2);
						}
						return window[widgetId+'_'+funcName].apply(widgetDom,params);
					}
				},
				/**
				 * 为组件绑定位置计算方法
				 */
				bindResize:function(widgetElement,widgetName){
					widgetElement.attr('data-resize',true).bind('widget.resize',function(event,ui){
						if(widgetElement.is(':hidden'))return;
						var oldResizekey = widgetElement.data('resizekey');
						
						var resizekey = [widgetElement.height(),widgetElement.width()].join('|');
						
						if(ui&&ui.forceResize==true){
							//强制重新计算位置
							$.youi.log.debug('force resize '+widgetName);
						}
						
						if($.isFunction(widgetElement['resize'])){
							widgetElement[widgetName]('resize');
							widgetElement.data('resizekey',[widgetElement.height(),widgetElement.width()].join('|'));
						}
						//阻止冒泡
						event.stopPropagation();
					});
				},
				/**
				 * 触发位置计算
				 */
				triggerResize:function(container,forceResize){
					if(container&&container.length){
						
					}else{
						var bodyElem = $('body',document);
						if(bodyElem.is('[data-resize="true"]')){
							bodyElem.trigger('widget.resize');
						}
						container = bodyElem;
					}
					container.find(':visible[data-resize="true"]').trigger('widget.resize',{forceResize:forceResize});
				}
			},
			/**
			 *字符处理工具 
			 */
			stringUtils:{
				
				isEmpty:function(value){
					return !$.youi.stringUtils.notEmpty(value);
				},
				
				notEmpty:function(value){
					if(value){
						return true;
					}else if(value===0){
						return true;
					}else if(value===false){
						return true;
					}
					return false;
				},
				
				fixValue:function(value,defaultValue){
					var result = value;
					if($.youi.stringUtils.isEmpty(value)){
						if($.youi.stringUtils.isEmpty(defaultValue)){
							defaultValue = '';
						}
						result = defaultValue;
					}
					
					return result;
				},
				/**
				 * myProperty --> my_property
				 */
				convertDataProperty:function(propertyName,split){
					var rcapitals = /[A-Z]/g,
						replaceFunction = function( c ) {
							return "-" + c.toLowerCase();
						};
					
					return propertyName.replace(rcapitals,replaceFunction);
				}
			},
			/**
			 * 记录集工具
			 * $.youi.recordUtils.recordToParameters
			 */
			recordUtils:{
				replaceByRecord:function(str,record){
					if(typeof(record)==='object'){
						for(var prop in record){
							var value = record[prop];
							if($.youi.stringUtils.isEmpty(value)){
								value = '';
							}
							str = str.replace(new RegExp("\\{" + prop + "\\}", "g"), value);
						}
					}
					str = str.replace(new RegExp("\\{.*\\}", "g"), '');
					return str;
				},
			
				getPropertyValue:function(record,property){
					if(!property)return;
					var value;
					var properties = property.split('.');
					if(properties.length>1){//处理多级属性
						value = record;
						for(var i=0;i<properties.length;i++){
							value = value[properties[i]];
							if($.youi.stringUtils.isEmpty(value))return;
						}
					}else{
						value = record[property];
					}
					return value;
				},
				
				setPropertyValue:function(record,property,value){
					if(!property)return;
					var properties = property.split('.');
					if(properties.length>1){//处理多级属性
						
						var vObject = record[properties[0]]||{};
						record[properties[0]] = vObject;
						for(var i=1;i<properties.length;i++){
							if(i==properties.length-1){
								vObject[properties[i]] = value;
							}else{
								vObject = vObject[properties[i]] || {};
							}
						}
					}else{
						record[property] = value;
					}
				},
				
				/**
				 * record 对象转换为参数
				 */
				recordToParameters:function(record){
					var fieldValues = [];
					if(record){
						//隐藏域
						for(var property in record){
							var value = record[property];
							if($.youi.stringUtils.notEmpty(value)){
								if(typeof(value)=='string'||typeof(value)=='number'){
									fieldValues.push({
										property:property,
										value:value
									});//{}
								}else if(value&&$.isArray(value)){
									if(typeof(value[0])=='object'){//集合对象类型
										$(value).each(function(index){
											var valueRecord = this;
											for(var p in valueRecord){
												fieldValues.push({
													property:property+'['+index+'].'+p,
													value:valueRecord[p]
												});
											}
										});
									}else{
										$(value).each(function(index){
											fieldValues.push({
												property:property,
												value:this
											});
										});
									}
								}else if(value&&typeof(value) === 'object') {//&&property.indexOf('.'!=-1)
									//如果是对象，直接展开
									fieldValues = fieldValues.concat($.youi.recordUtils.recordToParameters(value));
								}
							}
							value = null;
						}
					}
					
					return fieldValues;
				}
			},
			/**
			 * $.youi.parameterUtils.propertyParameter:function(property,value);
			 */
			parameterUtils:{
				toParams:function(fieldValues){
					var params = [];
					for(var i=0;i<fieldValues.length;i++){
						params.push($.youi.parameterUtils.propertyParameter(fieldValues[i].property,fieldValues[i].value));
					}
					return params;
				},
				
				propertyParameter:function(property,value){
					var pamameters = [];
					if($.isArray(value)){
						$(value).each(function(){
							if(this!=null&&property)pamameters.push(''+property+'='+encodeURIComponent(this));
						});
					}else{
						if(property&&$.youi.stringUtils.notEmpty(value))pamameters.push(''+property+'='+encodeURIComponent(value));
					}
					return pamameters.join('&');
				},
				
				connectParameter:function(src,property,value){
					return src+(src.indexOf('?')==-1?'?':'&')+$.youi.parameterUtils.propertyParameter(property,value);
				}
			},
			
			buttonUtils:{
				/**
				 * 
				 */
				createButtons:function(buttons,group,command){
					var htmls = [];
					//排序按钮
					buttons.sort(function(obj1,obj2){
						var order1 = obj1.order||0;
						var order2 = obj2.order||0;
						
						return order1-order2;
					});
					
					if(buttons&&buttons.length){
						for(var i=0;i<buttons.length;i++){
							htmls.push($.youi.buttonUtils.createButton(buttons[i],command));
						}
					}
					
					return htmls.join('');
				},
				
				createButton:function(options,command){
					var htmls = [];
					
					if(options&&options.name){
						var activeStyle = options.active?'active-'+options.active:'active-0';
						var styles = ['youi-button btn btn-default',(options.disabled?'disabled':'')].concat(options.buttonStyles);
						var command = options.command||command;
						htmls.push('<button type="button" ');
						//if(options.action){
						htmls.push( 'data-name="'+options.name+'" ');
						if(command){
							htmls.push( 'data-command="'+command+'" ');
						}
						
						if(options.tooltips){
							htmls.push( ' title="'+options.tooltips+'" ');
						}
						
						if(options.name=='close'){
							htmls.push( ' data-dismiss="modal" ');
						}
						
						//}
						htmls.push(' class="'+styles.join(' ')+'">');
						if(options.icon){
							htmls.push('<span class="youi-icon icon-'+options.icon+'"></span> ');
						}
						if(!options.tooltips){
							htmls.push(options.caption);
						}
						htmls.push('</button>');
					}
					
					return htmls.join('');
				}
			},
			
			messageUtils:{
				showMessage:function(msg){
					_showPagePopover('page_alert_message','提示信息',msg);
				},
				
				showError:function(msg){
					_showPagePopover('page_alert_error','提示信息',msg);
				},
				
				confirm:function(message,confirmFunc){
					if(message&&arguments.length > 1){
						var params = $.makeArray(arguments).slice(2);
						_showConfirm(message,confirmFunc,params);
					}
				}
			},
			/**
			 * ajax工具
			 * $.youi.ajaxUtils.ajax
			 */
			ajaxUtils:{
				ajax:function(ajaxOptions){
					if(!ajaxOptions.url){
						$.youi.messageUtils.showError('没有ajax url参数！');
						return;
					}
					if(ajaxOptions.notShowLoading!=true){
						_showLoading(0,ajaxOptions.loadingText);//
					}
					
					if($.youi.serverConfig.contextPath&&ajaxOptions.url.substring(0,1)=='/'
							&&ajaxOptions.url.indexOf($.youi.serverConfig.contextPath)==-1){
						ajaxOptions.url = $.youi.serverConfig.contextPath+ajaxOptions.url.substring(1);
					}
					
					var options = $.extend({},{
						dataType:'json',
						type:'POST',
						contentType:'application/x-www-form-urlencoded;charset=UTF-8',//配置提交的contentType
						headers:{'Authorization':$.youi.serverConfig.authorization},
						error:function(jqXHR,statusText,responseText){
							if(statusText=='error'){
								var errorMessage = $.youi.resourceUtils.get('urlNotFound',this.url);
								$.youi.messageUtils.showError(errorMessage);
								oldError.apply(options,[errorMessage]);
							}
						}
					},ajaxOptions);
					
					var oldSuccess = options.success || function(){};
					var oldError =  options.error || function(){};
					var domainValidator = options.domainValidator||function(){};
					
					options.complete = function(jqXHR, statusText, responseText){
						_hideLoading();//关闭进度显示
					}
					
					options.success = function(results){
						$.youi.ajaxUtils.resultsCheck(results,$.extend({},this,{
							error:oldError,
							domainValidator:domainValidator
						}))&&oldSuccess.apply(options,[results]);
					};
					
					return $.ajax(options);
				},
				/**
				 * 通用结果集检查
				 */
				resultsCheck:function(results,options){
					if(results==null)return false;
					if(results.hasError){
						$.youi.messageUtils.showError(results.errorMsg);
						options.error.apply(options,[results.errorMsg]);
						return false;
					}
					
					var message = results.message;
					var checkFlag = true;
					if(message&&message.code){
						var code = message.code;
						switch(code){
							case '000000'://成功访问
								if(message.passed==null){
									$.youi.messageUtils.showMessage(message.info);
								}
								break;
							case '111111'://登录过期
								$.youi.messageUtils.showMessage(code+':'+message.info);
								checkFlag = false;
								window.location.href = $.youi.serverConfig.contextPath;//刷新页面
								return;
							case '111112'://对象属性校验不通过
								options.domainValidator.apply(options,[results]);
								options.error.apply(options,[message.info]);
								checkFlag = false;
								return;
							default:
								$.youi.messageUtils.showError(message.info);
								options.error.apply(options,[message.info]);
								checkFlag = false;
								return;
						}
					}
					return checkFlag;
				}
			}
		});
		
		/*
		 * 抽象类
		 */
		$.widget("youi.abstractWidget",$.ui.mouse, {
			_create:function(){
	//			var startTime = this._getTime();
				this.element.addClass("youi-"+this.widgetName);
				
				this.options = $.extend({},this.element.data(),this.options);
				//设置id
				this.options.id = this.element.attr('id')||(this.widgetName+'_'+this.uuid);
				
				if(!this.element.attr('id')){
					this.element.attr('id',this.options.id);
				}
				
				this._initModel();
				
				if(this.options.initHtml!=false){
					this._defaultHtmls();
				}
				
				if(this.options.bindResize){
					$.youi.widgetUtils.bindResize(this.element,this.widgetName);
				}
				
				this._initAction();
				
				this._initWidget();
			},
			
			/**
			 * 执行组件中的动作
			 */
			execCommand:function(dom,commandObj){
				if(commandObj.name){
					var commandFunc = commandObj.name+'Command';
					
					var args = Array.prototype.slice.call( arguments, 0 );
					if($.isFunction(this[commandFunc])){
						this[commandFunc].apply(this,args);
					}else if($.isFunction(this[commandObj.name])){
						this[commandObj.name].apply(this,args);
					}else if(this.options.buttonActions&&this.options.buttonActions[commandObj.name]){
						var action = this.options.buttonActions[commandObj.name];
						
						if(typeof(action)=='string'){
							action = window[action];
						}
						
						if($.isFunction(action)){
							action.apply(this,args);
						}
					}else{
						this._callGloablFunc.apply(this,[commandObj.name].concat(args));
					}
				}
			},
			/**
			 * 调用全局函数
			 */
			_callGloablFunc:function(funcName){
				var gloablFuncName = this.options.id+'_'+funcName.replace(/\./g,'_');
				
				return this.__callGloablFunc.apply(this,[gloablFuncName].concat(Array.prototype.slice.call( arguments, 1 )));//   (gloablFuncName);
			},
			
			__callGloablFunc:function(gloablFuncName){
				//this._log.debug(this._buildLogMsg('调用全局函数 '+gloablFuncName+'.'));
				
				if($.isFunction(window[gloablFuncName])){
					var args = Array.prototype.slice.call( arguments, 1 );
					try{
						return window[gloablFuncName].apply(this.element[0],args);
					}catch(err){
						
					}
				}
				
				return true;
			},
			
			resize:function(){
				if(this.options.bindResize){
					//var startTime = this._getTime();
					this._resize();
					this.element.addClass('resized');
					//this._log.debug(this._buildLogMsg('resize complete.',startTime));
				}
			},
			
			_initModel:function(){},
			_defaultHtmls:function(){},
			_initAction:function(){},
			_initWidget:function(){},
			
			_resize:function(){}
			
		});
		
		function _showLoading(wait,title){
			var id = 'youi_loading';
			var loading = $('#'+id);
			if(!loading.length){
				loading = $('<div class="youi-loading" id="'+id+'"></div>').appendTo($('body',document));
			}
			title = title||$.youi.resourceUtils.get('loading');
			$('body',document).addClass('show-loading');
			loading.show().html('<span class="icon-sun icon-3x icon-spin"></span><span class="loading-text">'+title+'</span>');
		}
		
		function _hideLoading(){
			var id = 'youi_loading';
			$('#'+id).hide('slow');//'slow'
			$('body',document).removeClass('show-loading');
		}
		
		function _showConfirm(message,confirmFunc,params,widgetInstance){
			if(message){
				var dialogId = 'youi-dialog-confirm';
				var messageDialog = $('#'+dialogId);
				if(!messageDialog.length){
					messageDialog = $('<div id="'+dialogId+'"></div>');
				}
				
				messageDialog.html(message).dialog({
					autoOpen: false,
					modal:true,
					width:600,
					position:['center',100],
					title:'确认提示',
					minHeight:300,
					zIndex:9999,
					buttons:[
					     {name:'confirm',caption:'确认',icon:'submit'}
					],
					buttonActions:{
						'confirm':function(){
							this.close();
							confirmFunc.apply(this,params);
						}
					}
				}).dialog('open').show();
			}
		}
		
		function _showPagePopover(popId,title,msg){
			var popElem = $('#'+popId+':first');
			
			if(popElem.length==0){
				popElem = $('<a tabindex=\"0\" id=\"'+popId+'\" data-trigger="focus" class=\"btn page-message-alert\" role=\"button\" data-toggle=\"popover\" title=\"提示信息\" data-content=\"\"></a>').insertBefore($('.page-container:first',document));
			}
			
			popElem.popover({
				template:'<div class="popover '+popId.replace(/_/g,'-')+'"><div class="arrow"></div><div class="page-alert-header"><span class="youi-icon icon-info-sign"></span><span class="title">'+title+'</span><span onclick="$(this).parents(\'.popover:first\').hide();" class="pull-right youi-icon icon-remove"></span></div><div class="popover-content"></div></div>',
				trigger:'focus',
				content:msg,
				delay: { "show": 300, "hide": 3000 }
			}).popover('show');
			
			popElem.next().find('.popover-content').html(msg);
		}
		
	})(jQuery);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-5
	 */
	__webpack_require__(1);

	(function( $, undefined ) {
		if($.youi&&$.youi.resource){
			$.extend($.youi.resource,{
				'loading':'数据加载中，请稍候...',
				'page.loading':'页面努力加载中，请稍后...',
				'urlNotFound':$.youi.getMessage('地址【{0}】访问异常!'),//访问地址没有找到
				'close':'关闭',
				/************************ grid resource************************/
				'grid.submit':'查询',
				'grid.reset':'重置',
				'grid.add':'新增',
				'grid.notFound':'未找到记录.',
				'grid.edit':'修改',
				'grid.remove':'删除',
				'grid.pagestat':$.youi.getMessage('{0}/{1}页,{2}条,显示{3}-{4}.'),//分页信息
				'grid.confirm.remove':$.youi.getMessage('确认删除选中的{0}条记录?'),
				'grid.noSelectMsg':'请选择一条记录',
				'grid.confirm.reload.notSubmit':'刷新表格会丢失未提交的数据,是否继续?',
				'grid.records.notFount':'未找到符合条件的记录!',
				'grid.editor.errorMessage':$.youi.getMessage('第{0}行，第{1}列：{2}.'),
				/************************ tabs resource************************/
				'tabs.maxOpenTab':$.youi.getMessage('最大允许打开{0}个标签.'),
				'tabs.close':'关闭页面',
				/************************ form resource************************/
				'form.invalid':$.youi.getMessage('校验提示：{0}.'),
				
				'error':'异常',
				
				'field.notNull': "不能为空.",
				'field.remote': "Please fix this field.",
				'field.email': "请输入正确的邮箱地址.",
				'field.url': "请输入正确的URL地址.",
				'field.date': "请输入正确的日期格式.",
				'field.dateISO': "Please enter a valid date ( ISO ).",
				'field.number': "请输入数字.",
				'field.digits': "请输入正整数.",
				'field.phone': "请输电话号码.",
				'field.creditcard': "Please enter a valid credit card number.",
				'field.equalTo': "Please enter the same value again.",
				'field.maxlength': $.youi.getMessage( "最大不能超过 {0}字符." ),
				'field.minlength': $.youi.getMessage( "Please enter at least {0} characters." ),
				'field.rangelength': $.youi.getMessage( "Please enter a value between {0} and {1} characters long." ),
				'field.range': $.youi.getMessage( "Please enter a value between {0} and {1}." ),
				'field.max': $.youi.getMessage( "Please enter a value less than or equal to {0}." ),
				'field.min': $.youi.getMessage( "Please enter a value greater than or equal to {0}." )
			});
		}
	})(jQuery);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	
	__webpack_require__(1);
	(function($) {
		var _log = $.youi.log;
		
		$.widget('youi.mousable',$.ui.mouse ,{
			options:{
				delay: 0,//
				distance: 1
			},
			
			_create:function(){
				this.element.disableSelection();
				this._mouseInit();
			},
			
			_mouseStart: function(event) {
				if(!this._trigger('start',event)){
					return false;
				}
			},
			_mouseDrag: function(event) {
				this._trigger('drag',event);
			},
			_mouseStop: function(event) {
				this._trigger('stop',event);
			},
			_mouseCapture: function(event) { 
				return true; 
			}
		});
		
	})(jQuery);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);

	(function($) {
		
		/**
		 *  page组件
		 * @author  zhouyi
		 * @version 1.0.0
		 */
		
		$.widget("youi.dialog",$.youi.abstractWidget,$.extend({},{
			options:{
				bindResize:true
			},
			
			_initModel:function(){
				this.buttons = [].concat(this.options.buttons);
				
				if(this.options.submit&&this.options.submit!='NOT'&&this.options.submitAction){
					this.buttons.push({
						name:'submit',
						command:'dialogCommand',
						order:101,
						caption:this.options.submit,
						buttonStyles:['btn-primary']
					});
				}
				
				if(this.options.close!='NOT'){
					this.buttons.push({
						command:'dialogCommand',
						name:'close',
						order:201,
						caption:'关闭'
					});
				}
				
			},
			
			/**
			 * 
			 */
			_initWidget:function(){
				//获取或创建dialog
				this.uiDailogContainer = this._getDialogContainer();
				
				this.uiDailogContainer.modal({
					show:false,
					backdrop:'static'
				});
				
				var that = this;
				if(this.options.width){
					this.element.parents('.modal-dialog:first').width(this.options.width);
				}
				
				if(this.options.height){
					this.element.height(this.options.height);
				}
				
			},
			
			/**
			 * dialog container
			 */
			_getDialogContainer:function(){
				var that = this;
				var uiDailogContainer = this.element.parents('.modal');
				if(uiDailogContainer.length===0){
					
					uiDailogContainer = $(_buildDailogHtml($.extend({},this.options,{buttons:this.buttons})));
					uiDailogContainer.insertAfter(this.element);
				
					this.element.appendTo(uiDailogContainer.find('.modal-body:first'));
				}
				
				uiDailogContainer.on('click','.youi-button[data-command="dialogCommand"]',function(event){
					var commandOptions = $(event.currentTarget).data();
					that.execCommand(event.currentTarget,commandOptions);
				});
				
				return uiDailogContainer;
			},
			
			/**
			 * 动作
			 */
			_initAction:function(){
				
			},
			
			widget:function(){
				return this.uiDailogContainer;
			},
			/**
			 * 打开对话框
			 */
			open:function(options){
				options = options||{};
				
				var dialogModal = this.element.parents('.modal-dialog:first');
				if(options.width){
					dialogModal.width(options.width);
				}
				
				if(options.height){
					this.element.height(options.height);
					dialogModal.height(options.height);
				}
				
				if(options.title){
					dialogModal.find('.modal-title:first').html(options.title);
				}
				
				this.element.show();
				this.uiDailogContainer.modal('show');
			},
			
			loadPage:function(pageIndex){
				if(this.options.pages&&this.options.pages[pageIndex]){
					//页面路径
					this.pageIndex = pageIndex;
					//设置页面标题
					
					if(this.options.pageTitles[pageIndex]){
						this.uiDailogContainer.find('.modal-title:first').html(this.options.pageTitles[pageIndex]);
					}
					
					$.youi.pageUtils.loadPage(this.element,this.options.pages[pageIndex]);
					
				}
			},
			/**
			 * 
			 */
			goNextPage:function(){
				this.pageIndex = this.pageIndex||0;
				
				if(this.options.pages&&this.options.pages[this.pageIndex+1]){
					this.loadPage(this.pageIndex+1);
				}
			},
			
			goPrevPage:function(){
				this.pageIndex = this.pageIndex||0;
				if(this.pageIndex>0&&this.options.pages&&this.options.pages[this.pageIndex-1]){
					this.loadPage(this.pageIndex-1);
				}
			},
			
			submit:function(){
				this._trigger('submitAction');
			},
			
			close:function(){
				this.uiDailogContainer.modal('hide');
			}
		}));
		/**
		 * 创建dialog的modal
		 */
		function _buildDailogHtml(options){
			var htmls = [];
			htmls.push('<div class="modal" id="modal_'+(options.id)+'" tabindex="-1" role="dialog">');
			htmls.push('  <div class="modal-dialog modal-lg" role="document">');
			htmls.push('    <div class="modal-content">');
			htmls.push('      <div class="modal-header">');
			htmls.push('        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>');
			htmls.push('        <h4 class="modal-title" id="myModalLabel">'+(options.title||'')+'</h4>');
			htmls.push('      </div>');
			htmls.push('      <div class="modal-body">');
			htmls.push('      </div>');
			htmls.push('      <div class="modal-footer">');
			htmls.push($.youi.buttonUtils.createButtons(options.buttons,'','dialogCommand'));
			htmls.push('      </div>');
			htmls.push('    </div>');
			htmls.push('  </div>');
			htmls.push('</div>');
			
			return htmls.join('');
		}
		
	})(jQuery);

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);

	(function($) {
		
		/**
		 *  page组件
		 * @author  zhouyi
		 * @version 1.0.0
		 */
		
		$.widget("youi.accordion",$.youi.abstractWidget,$.extend({},{
			options:{
				bindResize:true
			},
			
			/**
			 * 
			 */
			_initWidget:function(){
				
				var firstCollapse = this.element.find('.collapse:first').addClass('in');
				
				if(this.options.height>0){
					var headerHeight = 0;
					$('>.youi-panel>.panel-header',this.element).each(function(){
						headerHeight+=($(this).height()+25);
					});
					
					this.showPanelHeight = this.options.height - headerHeight;
					
					this.element.find('.collapse').height(this.showPanelHeight);
				}
			},
			
			
			/**
			 * 动作
			 */
			_initAction:function(){
				var height = this.options.height;
				if(height>0){
					var that = this;
					this.element.delegate('.collapse','shown.bs.collapse',function(event){
						$(this).height(that.showPanelHeight);
					});
				}
			}
			
		}));
	})(jQuery);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * giui JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-2-18
	 */

	__webpack_require__(1);

	(function($) {
		'use strict';
		
		//日期工具方法
		$.youi.dateUtils = {
			/**
			 * 日期格式化为字符串
			 */
			dateToStr:function(date,format,settings) {
				if (!date)
					return '';
				if('millis'==format){//毫秒格式
					return date.getTime();
				}
				return date.igFormat(format);
			},
			/**
			 * 字符串格式化为日期
			 */
			strToDate:function (value, format,settings) {
				if (format == null || value == null)
					throw 'Invalid arguments';
				var date = new Date();
				
				if('millis'==format){//毫秒格式
					date.setTime(value);
				}else{
					return date.igParse(format,value);
				}				
				return date;
			}
		};
		/**
		 * 日期下拉组件
		 */
		var _command = 'datepickerCommand',
			_panelStyle = 'd-panel';
		
		$.widget("youi.datepicker",$.youi.abstractWidget,$.extend({},{
			
			options:{
				format:'yyyy-MM-dd',
				showIcon:false
			},
			
			_initWidget:function(){
				this.panelContainer = this.element.find('.datepicker-content:first');
				this.labelContainer = this.element.find('.datepicker-label:first');
			},
			
			_defaultHtmls:function(){
				this.currentDate = new Date();//当前日历指向的年月对应日期
				this.selectedDate = new Date();//选择的日期
				
				var today = new Date();
				var drawYear = today.getFullYear();
				var drawMonth = today.getMonth();//（8+1）=9月
				var htmls = [];
				
				htmls.push('<div class="datepicker-header datepicker-row">');
				htmls.push(		'<div class="cell addon"><span class="youi-icon icon-circle-arrow-left" data-command="'+_command+'" data-name="left" ></span>');
				htmls.push(		'</div>');
				htmls.push(		'<span class="cell datepicker-label">');
				htmls.push(			'<span data-command="'+_command+'" data-name="expandMonth" class="header header-date show" data-month="'+drawMonth+'" data-year="'+drawYear+'">'+$.youi.dateUtils.dateToStr(today,'yyyy-MM')+'</span>');
				htmls.push(			'<span data-command="'+_command+'" data-name="expandYear" class="header header-month">month</span>');
				htmls.push(			'<span class="header header-year">year</span>');
				htmls.push(			'<span class="header header-hour">hour</span>');
				htmls.push(			'<span class="header header-time">time</span>');
				htmls.push(		'</span>');
				htmls.push(		'<div class="cell addon"><span class="youi-icon icon-circle-arrow-right" data-command="'+_command+'" data-name="right" ></span>');
				htmls.push(		'</div>');
				htmls.push('</div>');
				
				htmls.push('<div class="datepicker-content">');
				
				htmls.push('<div class="panel-date '+_panelStyle+' show">');
				htmls.push(this._generateContentHtml(drawYear,drawMonth));
				htmls.push('</div>');
				htmls.push('</div>');
				htmls.push('<div class="datepicker-footer datepicker-row">');
				
				htmls.push(		'<div class="cell addon"><span data-command="'+_command+'" data-name="today"  class="youi-icon icon-calendar" title="今天"></span> &nbsp;<span class="youi-icon icon-reply" data-command="'+_command+'" data-name="clear"  title="清空"></span></div>');
				this.element.html(htmls.join(''));
			},

			/**
			 * 产生日历的html
			 */
			_generateContentHtml:function(drawYear, drawMonth){
				var daysInMonth = this._getDaysInMonth(drawYear, drawMonth),
					firstDay = this._getFirstDayOfMonth(drawYear, drawMonth),
					firstDate = new Date(drawYear, drawMonth, 1);
				//
				firstDay = (firstDay==7)?'-1':firstDay;//周日置为-1
				var dayHeads = ['日','一','二','三','四','五','六'];
				
				var firstRowDays;
				var htmls = ['<table width="100%" border="0" cellpadding="0" cellspacing="1"><tbody>'];
				htmls.push('<tr><th>'+dayHeads.join('</th><th>')+'</th></tr>');
				htmls.push('<tr>');
				
				var tdDays;
				for(var i=0;i<7;i++){
					tdDays = i-firstDay+1;
					htmls.push('<td>');
					if(i>=firstDay){
						htmls.push('<a data-command="'+_command+'" data-name="selectDate" data-value="'+tdDays+'" id="'+tdDays+'" class="'+this._getDateTdClass(drawYear,drawMonth,tdDays,daysInMonth)+'">'+tdDays+'</a>');
						if(i==6){
							firstRowDays = tdDays;//记录第一行的最后一个日期
						}
					}else{
						var prevDate = this._dateAdd(firstDate,'d', i-firstDay);
						htmls.push('<a data-command="'+_command+'" data-name="selectOtherDate" data-year="'+prevDate.getFullYear()+'" data-month="'+prevDate.getMonth()+'" data-value="'+prevDate.getDate()+'" class="other-day datapicker-days">'+prevDate.getDate()+'</a>');
					}
					htmls.push('</td>');
					tdDays = null;
				}
				htmls.push('</tr>');
				//计算其他的日期所占的行数
				var otherDays = daysInMonth-firstRowDays;
				var rows = Math.ceil(otherDays/7);
				
				var dateIndex = firstRowDays;
				for(var i=0;i<rows;i++){
					htmls.push('<tr>');
					for(var j=0;j<7;j++){
						htmls.push('<td>');
						if(++dateIndex<=daysInMonth){
							htmls.push('<a data-command="'+_command+'" data-name="selectDate" data-value="'+dateIndex+'" class="'+this._getDateTdClass(drawYear,drawMonth,dateIndex,daysInMonth)+'">'+dateIndex+'</a>');
						}else{
							var prevDate = this._dateAdd(firstDate,'d', dateIndex-1);
							htmls.push('<a data-command="'+_command+'" data-name="selectOtherDate" data-year="'+prevDate.getFullYear()+'" data-month="'+prevDate.getMonth()+'" data-value="'+prevDate.getDate()+'" class="other-day datapicker-days small">'+prevDate.getDate()+'</a>');
						}
						htmls.push('</td>'); 
					}
					htmls.push('</tr>');
				}
				htmls.push('</tbody></table>');
				return htmls.join('');
			},
			
			_yearPanelHtml:function(options){
				var panelHtmls = [];
				var year = parseInt(options.year);
				
				for(var i=0;i<12;i++){
					var tYear = year-6+i;
					panelHtmls.push('<div data-value="'+tYear+'" data-year="'+tYear+'"  data-command="'+_command+'" data-name="expandMonth" class="col-sm-4 year">'+tYear+'</div>');
				}
				
				return panelHtmls.join('');
			},
			
			_monthPanelHtml:function(){
				var panelHtmls = [];
				for(var i=0;i<12;i++){
					panelHtmls.push('<div data-value="'+i+'"  data-command="'+_command+'" data-name="selectedMonth" class="col-sm-3 month">'+_formatNum(i+1)+'月</div>');
				}
				return panelHtmls.join('');
			},
			
			_datePanelHtml:function(options){
				return this._generateContentHtml(options.year, options.month);
			},
			
			_hourPanelHtml:function(){
				var panelHtmls = [];
				//上午
				for(var i=0;i<24;i++){
					panelHtmls.push('<div data-value="'+i+'" data-command="'+_command+'" data-name="expandTime" class="col-sm-2 hour">'+_formatNum(i)+'</div>');
					if(i==11){
						panelHtmls.push('<div class="col-sm-12 line"></div>');
					}
				}
				//下午
				return panelHtmls.join('');
			},
			
			_timePanelHtml:function(){
				var panelHtmls = [];
				var total = 60;
				var interval = 1;
				var count = total/interval;
				var scol = 2;
				//2 3 4
				for(var i=0;i<count;i++){
					panelHtmls.push('<div data-value="'+(i*interval)+'" data-command="'+_command+'" data-name="selectTime" class="col-sm-'+scol+' time">'+_formatNum(i*interval)+'</div>');
				}
				return panelHtmls.join('');
			},
			
			_getFirstDayOfMonth: function(year, month) {
				return new Date(year, month, 1).getDay();
			},
			
			_getDaysInMonth: function(year, month) {
				return 32 - new Date(year, month, 32).getDate();
			},
			
			_getYearMonthStr:function(year, month,d){
				return year+'年'+(month+1)+'月'+(d?(d+'日'):'');
			},
			
			_getDateTdClass:function(year, month, days,daysInMonth){
				var classes = [];
				if(days>0&&days<=daysInMonth){
					classes.push('datapicker-days');
				}
				
				var selectedYear  = this.selectedDate.getFullYear(),
					selectedMonth = this.selectedDate.getMonth(),
					selectedDays  = this.selectedDate.getDate();
				if(selectedYear==year&&selectedMonth==month&&days==selectedDays){
					classes.push('selected');
				}
				
				if(days<10){
					classes.push('small');
				}
				var today = new Date();
				if(today.getFullYear()==year&&today.getMonth()==month&&days==today.getDate()){
					classes.push('today');
				}
				
				return classes.join(' ');
			},
			
			_initAction:function(){
				this._on({
					'click [data-command=datepickerCommand]':function(event){
						var datas = $.extend({},$(event.currentTarget).data(),{'ctrlKey':event.ctrlKey});
						this.execCommand(event.currentTarget,datas);
						event.stopPropagation();
					}
				});
				
				this.element.bind('click',function(event){
					return false;
				}).bind('mousedown',function(event){
					event.stopPropagation();
				});
			},
			
			_moveDispatcher:function(moveType,dom,ui){
				var header = this.element.find('.datepicker-label .header:visible:last');
				var funcName = '';
				if(header.hasClass('header-date')){
					//日历面板，上一月，下一月
					funcName = '_'+moveType+'_month'
				}else if(header.hasClass('header-month')){
					//月份面板，上一年，下一年
					funcName = '_'+moveType+'_year'
				}else if(header.hasClass('header-year')){
					//年份面板，上12年，下12年
					funcName = '_'+moveType+'_year_group'
				}else if(header.hasClass('header-hour')){
					//小时选择面板，上一天，下一天
					funcName = '_'+moveType+'_date'
				}else if(header.hasClass('header-time')){
					//时间选择面板，上一小时，下一小时
					funcName = '_'+moveType+'_hour'
				}
				
				if($.isFunction(this[funcName])){
					this[funcName](header,ui);
				}
			},
			
			_next_month:function(header,ui){
				this._execMove(header,'date','m',1,true);
			},
			
			_prev_month:function(header,ui){
				this._execMove(header,'date','m',-1,true);
			},
			
			_next_year:function(header,ui){
				this._execMove(header,'month','y',1,false);
			},
			
			_prev_year:function(header,ui){
				this._execMove(header,'month','y',-1,false);
			},
			
			_next_year_group:function(header,ui){
				this._execMove(header,'year','y',12,true);
			},
			
			_prev_year_group:function(header,ui){
				this._execMove(header,'year','y',-12,true);
			},
			
			_next_date:function(header,ui){
				this._execMove(header,'hour','d',1,false);
			},
			
			_prev_date:function(header,ui){
				this._execMove(header,'hour','d',-1,false);
			},
			
			_next_hour:function(header,ui){
				this._execMove(header,'time','h',1,false);
			},
			
			_prev_hour:function(header,ui){
				this._execMove(header,'time','h',-1,false);
			},
			
			_execMove:function(header,showPanelName,cType,delt,refresh){
				var datas = header.data();
				var date = new Date(datas.year,datas.month||0,datas.date||1,datas.hour||0);
				
				var nextDate = this._dateAdd(date, cType, delt);
				
				var options = $.extend({},{
					year:nextDate.getFullYear(),
					month:nextDate.getMonth(),
					date:nextDate.getDate(),
					hour:nextDate.getHours()});
				this._showPanel(showPanelName, null, options, refresh);
			},
			
			_dateAdd:function(date,interval, number){
	            $.youi._date = new Date(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours());
	            var k = { 'y': 'FullYear', 'q': 'Month', 'm': 'Month', 'w': 'Date', 'd': 'Date', 'h': 'Hours', 'n': 'Minutes', 's': 'Seconds', 'ms': 'MilliSeconds' };
	            var n = { 'q': 3, 'w': 7 };
	            eval('$.youi._date.set' + k[interval] + '($.youi._date.get' + k[interval] + '()+' + ((n[interval] || 1) * number) + ')');
	            return $.youi._date;
			},
			
			/**
			 * 
			 */
			_showPanel:function(name,dom,ui,refresh){
				this.panelContainer.find('.show').removeClass('show');
				
				var options = $.extend({},$(dom).data(),ui);
				var panel = this._getPanel(name,options,refresh);
				panel.addClass('show');
				
				this.labelContainer.find('.show').removeClass('show');
				this._showHeaderPanel(name,options);
				
			},
			
			/**
			 * 
			 */
			_showHeaderPanel:function(name,options){
				var panelHeader = this.element.find('.header.header-'+name);
				panelHeader.addClass('show');
				var funcName = '_'+name+'PanelHeaderData';
				if($.isFunction(this[funcName])){
					var datas = this[funcName](options);
					panelHeader.html(datas.text);
					for(var i in datas){
						panelHeader.data(i,datas[i]);
					}
				}
			},
			
			_hourPanelHeaderData:function(options){
				return {
					year:options.year,
					month:options.month,
					date:options.date,
					text:this._formatText(options.year, options.month,options.date)
				};
			},
			
			_timePanelHeaderData:function(options){
				return {
					year:options.year,
					month:options.month,
					date:options.date,
					hour:options.hour,
					text:this._formatText(options.year,options.month,options.date,options.hour)
				};
			},
			
			_formatText:function(year,month,date,hour){
				var texts = [];
				texts.push(year);
				if(month||month==0){
					texts.push('-'+_formatNum(month+1));
				}
				if(date||date==0){
					texts.push('-'+_formatNum(date));
				}
				if(hour||hour==0){
					texts.push(' '+_formatNum(hour)+':00');
				}
				return texts.join('');
			},
			
			_monthPanelHeaderData:function(options){
				return {
					year:options.year,
					text:options.year
				};
			},
			
			_yearPanelHeaderData:function(options){
				var year = parseInt(options.year);
				return {
					year:year,
					text:(year-6)+' - '+(year+5)
				};
			},
			
			_datePanelHeaderData:function(options){
				return {
					year:options.year,
					month:options.month,
					text:this._formatText(options.year, options.month)
				};
			},
			
			/**
			 * 
			 */
			_getPanel:function(name,options,refresh){
				var panel = this.element.find('.'+_panelStyle+'.panel-'+name);
				
				if(refresh==true){
					panel.remove();
				}
				
				if(refresh==true||panel.length==0){
					var htmls = ['<div class="'+_panelStyle+' panel-'+name+'">'];
					var funcName = '_'+name+'PanelHtml';
					if($.isFunction(this[funcName])){
						htmls.push(this[funcName](options));
					}
					htmls.push('</div>');
					panel = $(htmls.join('')).appendTo(this.panelContainer);
				}
				return panel;
			},
			
			_selectDate:function(options,dom){
				var selectDate = new Date();
				selectDate.setFullYear(options.year);
				selectDate.setMonth(options.month);
				selectDate.setDate(options.date);
				
				if(options.hour||options.hour==0){
					selectDate.setHours(options.hour);
				}
				if(options.minute||options.minute==0){
					selectDate.setMinutes(options.minute);
					selectDate.setSeconds(0);
				}
				
				var selectValue = $.youi.dateUtils.dateToStr(selectDate,this.options.format);
				
				//选
				this.element.find('.datepicker-content .selected').removeClass('selected');
				if(dom){
					$(dom).addClass('selected');
				}
	//			this.element.find('.datepicker-content #'+selectDate.getDate()).addClass('selected');
				if(this.options.bind){
					var bind = $(this.options.bind);
					bind.val(selectValue);
					this.close();
				}
				
				if($.isFunction(this.options.onSelect)){
					this._trigger('onSelect',null,{selectDate:selectDate});
				}
			},
			
			leftCommand:function(dom,ui){
				this._moveDispatcher('prev',dom,ui);
			},
			

			rightCommand:function(dom,ui){
				this._moveDispatcher('next',dom,ui);
			},
			
			expandMonthCommand:function(dom,ui){
				this._showPanel('month',dom,ui);
			},
			
			expandYearCommand:function(dom,ui){
				this._showPanel('year',dom,ui,true);
			},
			
			expandDateCommand:function(dom,ui){
				this._showPanel('date',dom,ui);
			},
			
			expandHourCommand:function(dom,ui){
				var dateHeader = this.labelContainer.find('.header-date');
				ui.date = $(dom).attr('id');
				this._showPanel('hour',dom,$.extend({},dateHeader.data(),ui));
			},
			
			expandTimeCommand:function(dom,ui){
				var hourHeader = this.labelContainer.find('.header-hour');
				this._showPanel('time',dom,$.extend({},hourHeader.data(),ui,{hour:$(dom).data('value')}));
			},
			/**
			 * 选择时间
			 */
			selectTimeCommand:function(dom,ui){
				var timeHeader = this.labelContainer.find('.header-time');
				
				var options = $.extend({},timeHeader.data(),$(dom).data());
				//alert(options);
				options.minute = options.value;
				this._selectDate(options);
			},
			
			/**
			 * 选择日期
			 */
			selectDateCommand:function(dom,ui){
				var dateHeader = this.labelContainer.find('.header-date');
				var options = $.extend({},ui,dateHeader.data(),{date:$(dom).data('value')});
				if(this.options.bind&&this.options.bind.hasClass('timable')){
					this._showPanel('hour',dom,options);
				}else{
					this._selectDate(options,dom);
				}
			},
			
			selectOtherDateCommand:function(dom,ui){
				var options = $.extend({},ui,{date:$(dom).data('value'),year:$(dom).data('year'),month:$(dom).data('month')||0});
				this._selectDate(options,dom);
			},
			
			clearCommand:function(dom,ui){
				this._trigger('onClear');
			},
			
			todayCommand:function(dom,ui){
				var date = new Date();
				this._showPanel('date', dom, {year:date.getFullYear(),month:date.getMonth()},true);
				this._trigger('onToday',null,{selectDate:date});
			},
			
			/**
			 * 选择月份
			 */
			selectedMonthCommand:function(dom,ui){
				var monthHeader = this.labelContainer.find('.header-month');
				var options = $.extend({month:$(dom).data('value')},monthHeader.data(),ui);
				this._showPanel('date', dom, options,true);
			}
		}));
		
		// (c) 2008 Infragistics - Do NOT modify the content of this file
		function Tokenizer(str){
			this.value="";
			this.pos=0;
			this.string=str;
			this.len=str.length;
			this.fmts=["yyyy","yy","y","MMMM","MMM","NNN","MM","M","dd","d","EEEE","EE","E","hh","h","HH","H","KK","K","kk","k","mm","m","ss","s","a"];
			this.parse_string=function(strs,cs){
				for(var i=0;i<strs.length;++i){
					var tkn_len=strs[i].length;
					var tkn_str=cs?strs[i]:strs[i].toLowerCase();
					if(this.len>=this.pos+tkn_len){
						var value=cs?this.string.substr(this.pos,tkn_len):this.string.substr(this.pos,tkn_len).toLowerCase();
						if(value==tkn_str){
							this.value=this.string.substr(this.pos,tkn_len);
							this.pos=this.pos+tkn_len;
							return i;
						}
					}
				}
				return-1;
			};
			this.parse_char=function(){
				if(this.len>=this.pos+1){
					this.value=this.string.substr(this.pos,1);
					this.pos=this.pos+1;
					return 0;
				}
				return-1;
			};
			this.parse_space=function(){
				while((this.string.charAt(this.pos)==" ")||(this.string.charAt(this.pos)=="\t")){
					++this.pos;
				}
				return 0;
			};
			this.parse_number=function(n,min,max){
				if(this.len>=this.pos+n){
					for(var i=0;i<n;++i){
						if(parseInt(this.string.charAt(this.pos+i),10)!=this.string.charAt(this.pos+i)){
							return-1;
						}
					}
					this.value=this.string.substr(this.pos,n);
					var value=parseInt(this.value,10);
					if((value>=min)&&(value<=max)){
						this.pos+=n;
						return value;
					}
				}
				return-1;
			};
			this.parse_format=function(){
				if(this.parse_string(this.fmts,true)==-1){
					return this.parse_char();
				}
				return 0;
			};
		};
		Date.prototype.igSetLocale=function(mnths,months,dys,days,ampms){
			this.mnths=mnths===null?this.en_mnths:mnths.split(",");
			this.months=months===null?this.en_months:months.split(",");
			this.dys=dys===null?this.en_dys:dys.split(",");
			this.days=days===null?this.en_days:days.split(",");
			this.ampms=ampms===null?this.en_ampms:ampms.split(",");
		};
		Date.prototype.itoa=function(i,d){
			var str=""+i;
			var len=str.length;
			for(var j=0;j<(d-len);++j){
				str="0"+str;
			}
			if(len>d){
				str=str.substr(len-d);
			}
			return str;
		};
		Date.prototype.igFormat=function(fmt){
			var year=this.getFullYear();
			var month=this.getMonth();
			var date=this.getDate();
			var day=this.getDay();
			var hour=this.getHours();
			var minute=this.getMinutes();
			var second=this.getSeconds();
			var tkn=new Tokenizer(fmt);
			var str="";
			while(tkn.parse_format()!=-1){
				switch(tkn.value){
					case"yyyy":str+=this.itoa(year,4);
					break;
					case"yy":str+=this.itoa(year,2);
					break;
					case"y":str+=this.itoa(year,4);
					break;
					case"MMMM":str+=this.months[month];
					break;
					case"MMM":str+=this.mnths[month];
					break;
					case"NNN":str+=this.mnths[month];
					break;
					case"MM":str+=this.itoa(1+month,2);
					break;
					case"M":str+=(1+month);
					break;
					case"dd":str+=this.itoa(date,2);
					break;
					case"d":str+=date;
					break;
					case"EEEE":case"EE":str+=this.days[day];
					break;
					case"E":str+=this.dys[day];
					break;
					case"hh":str+=this.itoa((hour%12)===0?12:(hour%12),2);
					break;
					case"h":str+=((hour%12)===0?12:(hour%12));
					break;
					case"HH":str+=this.itoa(hour,2);
					break;
					case"H":str+=hour;
					break;
					case"KK":str+=this.itoa(hour%12,2);
					break;
					case"K":str+=(hour%12);
					break;
					case"kk":str+=this.itoa(hour===0?24:hour,2);
					break;
					case"k":str+=(hour===0?24:hour);
					break;
					case"mm":str+=this.itoa(minute,2);
					break;
					case"m":str+=minute;
					break;
					case"ss":str+=this.itoa(second,2);
					break;
					case"s":str+=second;
					break;
					case"a":str+=hour<12?this.ampms[0]:this.ampms[1];
					break;
					case"W":str+=this.getWeekInMonth(date);
					break;
					case"w":str+=this.getWeekInYear(this);
					break;
					default:str=str+tkn.value;
				}
			}
			return str;
		};
		
		Date.prototype.getWeekInMonth=function(date){
			return Math.ceil(date/7);
		};
		
		Date.prototype.getWeekInYear=function(timeInstance){
			var januaryFirst=new Date(timeInstance.getFullYear(),0,1);
			return Math.ceil((((timeInstance-januaryFirst)/86400000)+januaryFirst.getDay())/7);
		};
		Date.prototype.igParse=function(fmt,str){
			str = str||'yyyy-MM-dd';
			var fmt_tkn=new Tokenizer(fmt);
			var str_tkn=new Tokenizer(str);
			
			var year=-1;
			var month=-1;
			var date=-1;
			var day=-1;
			var hours=-1;
			var minutes=-1;
			var seconds=-1;
			var ampm=0;
			while(fmt_tkn.parse_format()!=-1){
				switch(fmt_tkn.value){
					case"yyyy":
						year=str_tkn.parse_number(4,0,9999);
						if(year<0){
							return null;
						}
						break;
					case"yy":
						year=str_tkn.parse_number(2,0,99);
						if(year<0){
							return null;
						}
						if(year>50)
							year+=1900;
						else
							year+=2000;
						break;
					case"y":
						year=str_tkn.parse_number(4,0,9999);
						if(year<0){
							year=str_tkn.parse_number(2,0,99);
							if(year>=0){
								year+=2000;
							}
						}
						if(year<0){
							return null;
						}
						break;
					case"MMM":
					case"MMMM":
					case"NNN":
						month=str_tkn.parse_string(this.mnths,false);
						if(month<0){
							month=str_tkn.parse_string(this.months,false);
						}
						if(month<0){
							return null;
						}
						break;
					case"MM":
						month=str_tkn.parse_number(2,1,12);
						if(month<0){
							return null;
						}
						--month;
						break;
					case"M":
						month=str_tkn.parse_number(2,1,12);
						if(month<0){
							month=str_tkn.parse_number(1,1,12);
						}
						if(month<0){
							return null;
						}
						--month;
						break;
					case"dd":
						date=str_tkn.parse_number(2,1,31);
						if(date<0){
							return null;
						}
						break;
					case"d":
						date=str_tkn.parse_number(2,1,31);
						if(date<0){
							date=str_tkn.parse_number(1,1,31);
						}
						if(date<0){
							return null;
						}
						break;
					case"EEEE":
					case"EE":
						day=str_tkn.parse_string(this.days,false);
						if(day<0){
							return null;
						}
						break;
					case"E":
						day=str_tkn.parse_string(this.dys,false);
						if(day<0){
							return null;
						}
						break;
					case"hh":
						hours=str_tkn.parse_number(2,1,12);
						if(hours<0){
							return null;
						}
						if(hours==12){
							hours=0;
						}
						break;
					case"h":
						hours=str_tkn.parse_number(2,1,12);
						if(hours<0){
							hours=str_tkn.parse_number(1,1,12);
						}
						if(hours<0){
							return null;
						}
						if(hours==12){
							hours=0;
						}
						break;
					case"HH":
						hours=str_tkn.parse_number(2,0,23);
						if(hours<0){
							return null;
						}
						break;
					case"H":
						hours=str_tkn.parse_number(2,0,23);
						if(hours<0){
							hours=str_tkn.parse_number(1,0,23);
						}
						if(hours<0){
							return null;
						}
						break;
					case"KK":
						hours=str_tkn.parse_number(2,0,11);
						if(hours<0){
							return null;
						}
						break;
					case"K":
						hours=str_tkn.parse_number(2,0,11);
						if(hours<0){
							hours=str_tkn.parse_number(1,0,11);
						}
						if(hours<0){
							return null;
						}
						break;
					case"kk":
						hours=str_tkn.parse_number(2,1,24);
						if(hours<0){
							return null;
						}
						if(hours==24){
							hours=0;
						}
						break;
					case"k":
						hours=str_tkn.parse_number(2,1,24);
						if(hours<0){
							hours=str_tkn.parse_number(1,1,24);
						}
						if(hours<0){
							return null;
						}
						if(hours==24){
							hours=0;
						}
						break;
					case"mm":
						minutes=str_tkn.parse_number(2,0,59);
						if(minutes<0){
							return null;
						}
						break;
					case"m":
						minutes=str_tkn.parse_number(2,0,59);
						if(minutes<0){
							minutes=str_tkn.parse_number(1,0,59);
						}
						if(minutes<0){
							return null;
						}
						break;
					case"ss":
						seconds=str_tkn.parse_number(2,0,59);
						if(seconds<0){
							return null;
						}
						break;
					case"s":
						seconds=str_tkn.parse_number(2,0,59);
						if(seconds<0){
							seconds=str_tkn.parse_number(1,0,59);
						}
						if(seconds<0){
							return null;
						}
						break;
					case"a":
						ampm=str_tkn.parse_string(this.ampms,false);
						if(ampm<0){
							return null;
						}
						break;
					case" ":
						str_tkn.parse_space();
						break;
					case"w":break;
					case"W":break;
					default:
						if(str_tkn.parse_char()<0){
							return null;
						}
						if(fmt_tkn.value!=str_tkn.value){
							return null;
						}
						break;
				};
			}
			if(year!=-1){
				this.setFullYear(year);
			}
			if(month!=-1){
				if(date==-1)
				previousDate=this.getDate();
				this.setDate(1);
				this.setMonth(month);
				if(date!=-1){
					this.setDate(date);
				}
				else{
					this.setDate(previousDate);
				}
			}
			else if(date!=-1){
				this.setDate(date);
			}
			if(hours!=-1){
				this.setHours(ampm===0?hours:hours+12);
			}
			if(minutes!=-1){
				this.setMinutes(minutes);
			}
			if(seconds!=-1){
				this.setSeconds(seconds);
			}
			if((day!=-1)&&(this.getDay()!=day)){
				return null;
			}
			return this;
		};
		var en_mnths=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
			en_months=["January","February","March","April","May","June","July","August","September","October","November","December"],
			en_dys=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],
			en_days=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],
			en_ampms=["am","pm"];
		
		Date.prototype.mnths=en_mnths;
		Date.prototype.months=en_months;
		Date.prototype.dys=en_dys;
		Date.prototype.days=en_days;
		Date.prototype.ampms=en_ampms;
		
		function _formatNum(i){
			return (i<10?'0':'')+i;
		}
		
	})(jQuery);

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);
	__webpack_require__(2);

	(function($) {
	//	var _log = $.youi.log;
		/**
		 *  grid组件
		 * @author  zhouyi
		 * @version 1.0.0
		 */
		
		var _rowStyle = 'grow',
			_cellStyle = 'cell',
			_selectedStyle = 'selected',
			_selectingStyle = 'selecting',
			_grid_func_beforeSubmit = 'beforeSubmit',//提交前函数
			_grid_func_afterSubmit = 'afterSubmit',//提交后函数
			_colResizeHandlerStyle = 'resize-handler',
			_srOnly='<span class="sr-only">(current)</span>';//
		
		$.widget("youi.grid",$.youi.abstractWidget,$.extend({},{
			options:{
				bindResize:true,
				pageSize:15
			},
			
			currentPageIndex:1,//记录当前页
			
			cols:[],
			
			/**
			 * 初始化模型
			 */
			_initModel:function(){
				
				//列模型
				this.cols = [];
				
				this.idKeys = this.options.idKeys;
				
				if(typeof(this.idKeys) == 'string'){
					this.idKeys = this.idKeys.split(',');
				}
				
				this._initCurrentPageIndex();
				
				var cols = this.options.cols||[];
				
				for(var i=0;i<cols.length;i++){
					if(cols[i].property){
						this.cols.push(cols[i]);
					}
				}
			},
			
			_initCurrentPageIndex:function(){
				if(this.element.is('[data-hash]:visible')){
					//计算page hash
					this.currentPageIndex = $.youi.pageUtils.getWidgetPageHash(this.element);
				}
				this.currentPageIndex = this.currentPageIndex||1;
			},
			
			/**
			 * 生成组件html,initHtml参数不为false时执行
			 */
			_defaultHtmls:function(){
				var htmls = [];
				
				htmls.push('<table class="table table-striped table-bordered table-hover table-condensed"><thead>');
				//头
				htmls.push(this._buildHeaderHtmls());
				//
				htmls.push('</thead>');
				//
				//数据区域
				htmls.push(this._buildDataContentHtmls());
				//
				htmls.push('</table>');
				//脚
				htmls.push(this._buildFooterHtmls());
				this.element.append(htmls.join(''));
			},
			
			_buildHeaderHtmls:function(){
				var htmls = [];
				$(this.cols).each(function(index){
					htmls.push('<th>');
					htmls.push(this.caption||this.property);
					htmls.push('</th>');
				});
				return htmls.join('');
			},
			
			_buildDataContentHtmls:function(){
				return '<tbody></tbody>';
			},
			
			_buildFooterHtmls:function(){
				var htmls = [];
				htmls.push('<div class="grid-footer">');
				htmls.push('<nav><ul class="pagination grid-navigator">');
				htmls.push('</ul><span class="pPageStat"></span></nav>');
				htmls.push('</div>');
				return htmls.join('');
			},
			/**
			 * 构造分页条
			 */
			_buildPaginationHtml:function(pageCount){
				var htmls = [];
				if(pageCount>0){
					//
					var pNextDisable = '',
						pPrevDisable = '';
					if(pageCount<=1){//只有一页
						pNextDisable =' disabled';
						pPrevDisable = ' disabled';
					}else if(this.currentPageIndex==1){
						//首页
						pPrevDisable = ' disabled';
					}else if(this.currentPageIndex==pageCount){
						//尾页
						pNextDisable =' disabled';
					}
					
					htmls.push('<li><a class="pButton pFirst'+pPrevDisable+'" data-command="gridCommand" data-name="first"  aria-label="Previous"><span aria-hidden="true">&laquo;</span></a></li>');
					htmls.push('<li><a class="pButton pPrev'+pPrevDisable+'" data-command="gridCommand" data-name="prev"  aria-label="Previous"><span aria-hidden="true">‹</span></a></li>');
					
					var pad = 2;
					var centerIndex =  Math.max(this.currentPageIndex,pad+1);
					
					//如果
					if(centerIndex+pad>pageCount){
						centerIndex = pageCount - pad;
					}
					
					for(var i=centerIndex-pad;i<=Math.min(centerIndex+pad,pageCount);i++){
						var pageIndex = i;
						if(pageIndex>0){
							htmls.push('<li');
							if(this.currentPageIndex==pageIndex){
								htmls.push(' class="active" ');
							}
							htmls.push('><a data-command="gridCommand" data-name="goPage" data-index="'+pageIndex+'"  >'+pageIndex+(this.currentPageIndex==pageIndex?_srOnly:'')+'</a></li>');
						}
					}
					
					htmls.push('<li><a class="pButton pNext'+pNextDisable+'" data-command="gridCommand" data-name="next"  aria-label="Previous"><span aria-hidden="true">›</span></a></li>');
					
					htmls.push('<li><a class="pButton pLast'+pNextDisable+'" data-command="gridCommand" data-name="last"  aria-label="Next"><span aria-hidden="true">&raquo;</span></a></li>');
					
					htmls.push('<li><a class="pIcon refresh" data-command="gridCommand" data-name="refresh"  ><span aria-hidden="true" class="youi-icon icon-refresh"></span></a></li>');
					
				}
				return htmls.join('');
			},
			
			/**
			 * 
			 */
			_initWidget:function(){
				this.element.addClass('table-responsive');
				this._initModel();
				
				if(this.options.loaded!=false){
					this._ajaxData();//加载数据
				}
			},
			
			_initAction:function(){
				this._on({
					'click [data-command="gridCommand"]:not(.disabled)':function(event){
						var elem = $(event.currentTarget);
						var commandOptions = elem.data();
						
						this.execCommand(event.currentTarget,commandOptions,this._getRecordByDom(event.currentTarget));
						//阻止冒泡
						event.stopPropagation();
					},
					'click .grid-hcell.dropdown>.dropdown-menu>.option-item':function(event){
						//表头下拉选择动作
						var itemElem = $(event.currentTarget);
						var options = $.extend({caption:itemElem.text()},
								itemElem.parents('.grid-hcell:first').data(),
								itemElem.data());
						
						if(!itemElem.hasClass('selected')){
							itemElem.parents('.grid-hcell:first')
								.data('value',options.value).addClass('querying')
								.find('.selected-item:first').text(options.caption);
							$('.selected',itemElem.parent()).removeClass('selected');
							itemElem.addClass('selected');
							//单属性查询
							this._doSingleQuery(options);
						}
					},'click .single-property.dropdown>.dropdown-menu>.option-item':function(event){
						var itemElem = $(event.currentTarget);
						itemElem.parents('.single-property:first')
							.find('.query-property')
							.attr('data-property',itemElem.data('value'))
							.data('property',itemElem.data('value'))
							.text(itemElem.text());
					},'keydown .query-value':function(event){
						if(event.keyCode==13){
							$(event.currentTarget).next().click();
						}
					},'click .grow':function(event){
						var rowElem = $(event.currentTarget);
						this.element.find('.selected').not(event.currentTarget).removeClass('selected');
						rowElem.addClass('selected');
						
						this._callGloablFunc('select',rowElem,_getRowRecord(rowElem,this.cols));
						
					},'click .cell':function(event){
						if(this.options.editable){//可编辑的
							this._openEditor(event.currentTarget);
						}
					},'click .editor':function(event){
						//return false;
					},'click .editor>.dropdown-menu>.option-item':function(event){
						if(this.options.editable){//可编辑的
							var itemElem = $(event.currentTarget);
							var cellElem = itemElem.parents('.cell:first');
							cellElem.data('value',itemElem.data('value')).text(itemElem.text());
							this.currentEditorElem = null;
						}
					}
					
				});
				
				this.element.delegate('.grid-hcell.dropdown','show.bs.dropdown',function(event){
					var hcellElement = $(event.target);
					
					if(!hcellElement.hasClass('loaded')){
						hcellElement.find('.dropdown-menu').html(_buildHeaderConvert(hcellElement.data()));
						hcellElement.addClass('loaded');
					}
				});
			},
			
			_openEditor:function(cellDom){
				var col = this.cols[$(cellDom).prevAll().length];
				if(col&&col.editor){
					var cellElem = $(cellDom);
					
					if(this.currentEditorElem){
						if(this.currentEditorElem.parent()[0]==cellDom){
							return;//当前元素
						}else{
							this.currentEditorElem.trigger('closeEditor');
						}
					}
					
					var editorElem;
					if('fieldText'===col.editor){
						editorElem = $('<input style="width:100%;" class="editor fieldText" value="'+cellElem.data('value')+'"/>').appendTo(cellElem.empty());
						
						editorElem.bind('closeEditor',function(){
							cellElem.data('value',editorElem.val()).text(editorElem.val());
						});
					}else if('fieldSelect'===col.editor&&col.convert){
						var converts = $.youi.serverConfig.convertArray[col.convert],
							htmls = [];
						
						htmls.push('<div class="editor open fieldSelect dropdown">');
						htmls.push(	'<div class="dropdown-property" data-toggle="dropdown" aria-haspopup="false"  aria-expanded="true">'+cellElem.text()+'<span class="caret"></span></div>');
						htmls.push(	'<ul class="dropdown-menu">');
						for(var iConvert in converts){
							htmls.push('<li data-value="'+iConvert+'" class="option-item">'+converts[iConvert]+'</li>');
						}
						htmls.push(	'</ul>');
						htmls.push('</div>');
						
						editorElem = $(htmls.join('')).appendTo(cellElem.empty());
						
						//设置默认值
						if($.youi.stringUtils.isEmpty(cellElem.data('value'))){
							var firstItem = editorElem.find('.option-item:first');
							editorElem.find('.dropdown-property').text(firstItem.text());
							cellElem.data('value',firstItem.data('value'));
						}
						
						editorElem.bind('closeEditor',function(){
							cellElem.text(editorElem.find('.dropdown-property').text());
						});
					}
					
					this.currentEditorElem = editorElem;
					//this.editorElem.trigger(); 
				}
			},
			
			/**
			 * 获取行数据
			 */
			_getRecordByDom:function(dom){
				var rowElem = $(dom).parents('tr.grow:first');
				
				var records = this.element.data('records');
				
				var record;
				if(records){
					record = records[rowElem.prevAll().length];
				}else{
					record = _getRowRecord(rowElem,this.cols);
				}
				return record;
			},
			
			/**
			 * 删除选择的记录
			 */
			removeRecord:function(dom,commandOptions,record){
				if(this.options.removeSrc&&record){
					$.youi.messageUtils.confirm('确认删除!',_removeRecord,this.options.removeSrc,dom,commandOptions,record,this);
				}
			},
			
			_doSingleQuery:function(options){
				//清理其他的convert
				this.element.find('th.querying[data-property],.query-property.querying[data-property]')
					.not('[data-property="'+options.property+'"]')
					.removeClass('querying')
					.find('.selected-item').text('全部');
				
				this._ajaxData(options);
			},
			/**
			 * 
			 */
			_ajaxData:function(queryOptions){
				if(this.options.src){
					var that = this;
					var params = this._getParams(queryOptions);
					
					this.element.find('.grid-navigator .youi-icon.icon-refresh').addClass('icon-spin');
					
					$.youi.ajaxUtils.ajax({
						url:this.options.src,
						data:params.join('&'),
						success:function(results){
							if(results&&results.records){
								that.parseRecords(results.records,results.totalCount);
							}
						}
					});
				}
			},
			
			_getParams:function(queryOptions){
				var params = [];
				params = params.concat(this._getPagerParams());//分页参数
				params = params.concat(this._getQueryParams());//分页参数
	//			if(isSingleQuery==true&&queryOptions&&queryOptions.property&&$.youi.stringUtils.notEmpty(queryOptions.value)){
	//				params = params.concat(queryOptions.property+'='+queryOptions.value);
	//			}
				
				return params;
			},
			
			_getQueryParams:function(isSingleQuery){
				var queryParams = [];
				
				var singleQueryingElem = this.element.find('.querying[data-property]:first');
				if(singleQueryingElem.length){
					var queryOptions = singleQueryingElem.data();
					if(queryOptions.property&&$.youi.stringUtils.notEmpty(queryOptions.value)){
						queryParams.push(queryOptions.property+'='+queryOptions.value);
					}
				}
				
				var fieldValues = [];
				
				this.element.find('.youi-fieldLayout').each(function(){
					var values = $(this).fieldLayout('getFieldValues');
					if($.isArray(values)){
						fieldValues = fieldValues.concat(values);
					}
					
					$(this).find('.youi-field').each(function(index){
						var operator = this.getAttribute('operator');
						var property = this.getAttribute('data-property');
						if(operator){
							queryParams.push('operator:'+property+"="+operator);
						}
					});
				});
				
				if(fieldValues){
					$(fieldValues).each(function(){
						if(this.value){
							queryParams.push($.youi.parameterUtils.propertyParameter(this.property,this.value));
							
						}
					});
				}
				
				return queryParams;
			},
			
			/**
			 * 分页查询参数
			 */
			_getPagerParams:function(){
				var pagerParams = [];
				pagerParams.push('pager:pageIndex='+this.currentPageIndex);
				pagerParams.push('pager:pageSize='+(this.options.pageSize<0?10:this.options.pageSize));
				return pagerParams;
			},
			
			_showPagination:function(totalCount){
				this.totalCount = totalCount;
				if(this.options.usePager==false||this.options.editable){
					return;
				}
				if(!totalCount||totalCount==0){
					this.element.find('.grid-footer').hide();
					//未找到符合条件的记录.
					this.element.find('.table:first>tbody').html('<tr><td align="center" class="no-records" colspan="'+this.cols.length+'"><span class="youi-icon icon-info-sign"></span>'+$.youi.resourceUtils.get('grid.records.notFount')+'</td></tr>');
				}else{
					var pageIndex = this.currentPageIndex,
					pageSize  = this.options.pageSize,
					pageCount = Math.ceil(totalCount/pageSize);
				
					this.pageCount = pageCount;
					
					//如果当前页码大于总页数(在删除记录时出现此情况)
					if(pageIndex>pageCount){
						this.currentPageIndex = pageIndex;
						pageIndex = pageCount;
					}
					
					var stat;
					var r1 = (pageIndex-1) * pageSize + 1,
						r2 = pageIndex*pageSize;
					if(r2>totalCount)r2 = totalCount;
					stat = $.youi.resourceUtils.get('grid.pagestat',pageIndex,pageCount,totalCount,r1,r2);
					//
					this.element.find('.pPageStat:last').html(stat);
					this.element.find('.pageIndex:last').text(pageIndex);
					
					this.currentPageIndex = pageIndex;
					this.element.find('.pagination').html(this._buildPaginationHtml(pageCount));
					
					this.element.find('.grid-footer').show();
				}
				
			},
			
			/**
			 * 解析数据
			 */
			parseRecords:function(records,totalCount){
				//
				this.element.data('records',records);
				//
				var datasElem = this.element.find('.table:first>tbody');
				
				var htmls = [];
				
				for(var i=0;i<records.length;i++){
					htmls.push(_buildRow(records[i],this.cols,i,this.idKeys,this.options.dataProperties));
				}
				
				datasElem.html(htmls.join(''));
				//
				this._showPagination(totalCount);
				//回调函数
				this._callGloablFunc('afterLoad',totalCount,records);
				
			},
			
			first:function(dom,commandOptions){
				this.goPage(dom, $.extend({},commandOptions,{index:1}));
			},
			
			last:function(dom,commandOptions){
				this.goPage(dom, $.extend({},commandOptions,{index:this.pageCount}));
			},
			
			prev:function(dom,commandOptions){
				this.goPage(dom, $.extend({},commandOptions,{index:this.currentPageIndex-1}));
			},
			
			next:function(dom,commandOptions){
				this.goPage(dom, $.extend({},commandOptions,{index:this.currentPageIndex+1}));
			},
			/**
			 * 
			 */
			goPage:function(dom,commandOptions){
				var pageIndex = commandOptions.index||1;
				this.currentPageIndex = pageIndex;
				
				//查询数据
				this._ajaxData();
			},
			/**
			 * 单条件查询
			 */
			singleQuerySubmit:function(dom,commandOptions){
				var options = 
					$('.query-property',dom.parentNode)
						.data('value',$('.query-value',dom.parentNode).val()).addClass('querying').data();
				
				this._doSingleQuery(options);
			},
			
			/**
			 * 插入行
			 */
			insertRow:function(dom,commandOptions){
				this.element.find('tbody').prepend(_buildRow({},this.cols));
			},
			
			removeRow:function(dom,commandOptions){
				
				var selectedRowElem = this.element.find('tbody .grow.selected');
				
				var nextSelectedElem = selectedRowElem.next();
				if(!nextSelectedElem.length){
					nextSelectedElem = selectedRowElem.prev();
				}
				this.element.find('tbody .grow.selected').remove();
				
				nextSelectedElem.addClass('selected');
			},
			
			getRecords:function(){
				var records = [],
					cols = this.cols;
				this.element.find('.grow').each(function(){
					records.push(_getRowRecord($(this),cols));
				});
				return records;
			},
			
			
			refresh:function(){
				this._ajaxData();
			}
		}));
		
		function _buildRow(record,cols,rowIndex,idKeys,dataProperties){
			var htmls = [];
			var rowStyles = [_rowStyle];
			
			if(rowIndex%2==1){
				rowStyles.push('old');
			}
			
			htmls.push('<tr class="'+rowStyles.join(' ')+'"');
			if(idKeys){
				for(var i=0;i<idKeys.length;i++){
					var value = $.youi.stringUtils.fixValue($.youi.recordUtils.getPropertyValue(record,idKeys[i]));
					htmls.push('data-'+_convertProperty(idKeys[i])+'="'+value+'" ');
				}
			}
			
			if($.isArray(dataProperties)){
				$(dataProperties).each(function(){
					if($.youi.stringUtils.notEmpty(record[this])){
						htmls.push('data-'+_convertProperty(this)+'="'+record[this]+'" ');
					}
				});
			}
			
			htmls.push('>');
			for(var i=0;i<cols.length;i++){
				htmls.push(_buildCell(record,cols[i],rowIndex,i==cols.length-1));
			}
			htmls.push('</tr>');
			return htmls.join('');
		}
		
		function _buildCell(record,col,rowIndex,isLast){
			var htmls = [],
				cellStyles = ['cell'],
				cellData = _parseCellData(record,col,rowIndex);
			
			if(isLast){
				cellStyles.push('last');
			}
			
			if(col.type){
				cellStyles.push(col.type);
			}
			
			//可编辑单元格
			if(col.editor){
				cellStyles.push('editable '+col.editor);
			}
			
			if(col.renderer){
				cellStyles.push(col.property);
			}
			
			if(col.align){
				cellStyles.push(col.align);
			}
			
			htmls.push('<td data-value="'+cellData.value+'" class="'+cellStyles.join(' ')+'"');
			if(col.editor){
				htmls.push(' data-editor="'+col.editor+'" ');
			}
			htmls.push('>');
			htmls.push(cellData.html);
			htmls.push('</td>');
			return htmls.join('');
		}
		
		function _parseCellData(record,col,rowIndex){
			var value,text,defaultValue,html = '';
			
			value = $.youi.recordUtils.getPropertyValue(record,col.property);
			if(!value&&$.isFunction(col.defaultValue)){//如果默认值为函数
				defaultValue = col.defaultValue(record,col,rowIndex);
			}else{//默认值为普通字符
				defaultValue = col.defaultValue;
			}
			value = value==null?defaultValue:value;//value值
			
			var convertArray = $.youi.serverConfig.convertArray[col.convert];
			if($.isFunction(col.renderer)){//renderer
				text = col.renderer(col,record,convertArray);
			}else if(col&&col.convert&&convertArray){
				text = convertArray[value]||col.notConvertValue||value;
			}else{
				text = value;
			}
			
			switch(col.type){
				case 'checkbox':
					html = $.youi.htmlUtils.buildIconHtml(col.type,'gridCommand');//icon
					break;
				case 'radio':
					html = $.youi.htmlUtils.buildIconHtml(col.type);//icon
					break;
				case 'num':
					html = rowIndex+1;//icon
					break;
				case 'tree':
					html = '<span class="youi-icon tree-toggle-handler"></span><span class="tree-node-text">'+(text||'')+'</span>';//icon
					break;
				case 'date':
					if(value){
						col.format = col.format||'millis';
						col.textFormat = col.textFormat||'yyyy-MM-dd HH:mm:ss';
						
						var date = $.youi.dateUtils.strToDate(value, col.format);
						html = $.youi.dateUtils.dateToStr(date, col.textFormat);
						date = null;
					}
					break;
				case 'link'://link 
					var htmls = [];
					htmls.push('<a  data-command="gridCommand" data-name="cellLink"');
					htmls.push(' data-property="'+col.property+'" ');
					htmls.push(' >');
					htmls.push(text);
					htmls.push('</a>');
					html = htmls.join('');
					break;
				case 'button':
					if($.isArray(col.buttons)){
						var buttonHtmls = [];
						$(col.buttons).each(function(){
							//判断是否button是否不显示
							if(this.disableProperty&&$.inArray(record[this.disableProperty],['1','true'])!==-1){
								return '';
							}
							
							var styles = ['youi-icon',this.name,'icon-'+(this.icon||this.name)];
							var href = '';
							if(this.action){
								styles.push('page-link');
								href = 'href="'+(this.action?$.youi.pageUtils.parsePageUrl(this.action,record):'')+'"';
							}
							
							buttonHtmls.push('<a '+href+' title="'+(this.caption||''));
							buttonHtmls.push('" class="'+styles.join(' ')+'"');
							if(this.method){
								buttonHtmls.push(' target="'+this.method+'" ');
							}
							buttonHtmls.push(' data-command="gridCommand" ');
							buttonHtmls.push(' data-name="'+this.name+'" ');
							
							buttonHtmls.push('>'+(this.caption||'')+'</a>');
						});
						html =  buttonHtmls.join('');
					}
					break;
				case 'image':
					html = '<img height="28px"  src="'+value+'"/>';
					break;
				case 'selection':
					var styles = ['youi-icon fa'];
					if(value===true||value===1){
						styles.push('fa-check-square-o');
					}else{
						styles.push('fa-square-o');
					}
					html = '<span class="'+styles.join(' ')+'"></span>';
					break;
				default:
					html = text;
			}
			
			var value = $.youi.stringUtils.fixValue(value);
			
			return {
				value:value,
				html:html||value
			};
		}
		
		function _getCellValue(cellDom){
			var value = $(cellDom).data('value');
			return $.youi.stringUtils.fixValue(value);
		}
		
		function _buildHeaderConvert(options){
			var htmls = [];
			if(options){
				var converts = $.youi.serverConfig.convertArray[options.convert];
				if(converts){
					htmls.push('<li data-value="" class="option-item selected">全部</li>');
					for(var name in converts){
						htmls.push('<li data-value="'+name+'" class="option-item">'+converts[name]+'</li>');
					}
				}
			}
			return htmls.join('');
		}
		
		function _convertProperty(property){
			//大写字母转横线加小写
			var upperMathches = property.match(/[A-Z]/g);
			if(typeof(upperMathches)=='string'){
				upperMathches = [upperMathches];
			}
			
			if(upperMathches){
				for(var i=0;i<upperMathches.length;i++){
					property = property.replace(upperMathches[i],'-'+upperMathches[i].toLowerCase());
				}
			}
			
			return property.replace(/\./g,'_');
		}
		
		function _removeRecord(removeSrc,dom,commandOptions,record,gridWidget){
			var filedValues = $.youi.recordUtils.recordToParameters(record);
			$.youi.ajaxUtils.ajax({
				url:removeSrc,
				loadingText:'正在删除数据...',
				data:$.youi.parameterUtils.toParams(filedValues).join('&'),
				success:function(result){
					$(dom).parents('tr.grow:first').remove();
					
					gridWidget.totalCount--;
					gridWidget._showPagination(gridWidget.totalCount);
					
					gridWidget.element.data('records',null);
					
					dom = null;
					gridWidget = null;
				}
			});
			
		}
		
		function _getRowRecord(rowElem,cols){
			var rowRecord = {};
			if(rowElem.length){
				rowRecord = $.extend({},rowElem.data());
				rowElem.find('td.cell').each(function(index){
					var col = cols[index];
					if(col){
						rowRecord[col.property] = _getCellValue(this);
					}
				});
			}
			return rowRecord;
		}
		
	})(jQuery);

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);
	__webpack_require__(2);

	(function($) {
	//	var _log = $.youi.log;
		/**
		 *  page组件
		 * @author  zhouyi
		 * @version 1.0.0
		 */
		
		$.widget("youi.gridList",$.youi.abstractWidget,$.extend({},{
			options:{
				bindResize:true,
				rowStyle:'list-item',
				pageSize:15
			},
			/**
			 * _initAction 之前调用
			 */
			_initModel:function(){
				this.currentPageIndex = 1;//当前页
				this.queryParams = {};
				this.paginationElem = this.element.next('.grid-list-pagination').length?this.element.next('.grid-list-pagination'):this.element.next().next('.grid-list-pagination');
			},
			/**
			 * _initAction 之后调用
			 */
			_initWidget:function(){
				this._loadSrc();
			},
			
			_parseRecords:function(records,totalCount){
				var htmls = [];
				
				var template = '<div class="list-item '+this.options.rowStyle+'">'+this.options.template+'</div>';
				
				$(records).each(function(){
					htmls.push($.youi.recordUtils.replaceByRecord(template,$.extend({_contextPath:$.youi.serverConfig.contextPath},this)));
				});
				
				if(this.options.footerTemplate){
					var nav = {totalCount:totalCount,pageSize:this.options.pageSize};
					htmls.push('<div class="grid-list-footer">'+$.youi.recordUtils.replaceByRecord(this.options.footerTemplate,nav)+'</div>');
					this.element.addClass('showFooter');
				}
				
				this.element.html(htmls.join(''));
				
				
				this._showPagination(totalCount);
			},
			/**
			 * 显示记录条数
			 */
			_showPagination:function(totalCount){
				if(this.paginationElem.length){
					//计算上一页和下一页是否可以点击
					var pageCount = Math.ceil(totalCount/this.options.pageSize);
					this.paginationElem.find('.pageStats').html('第'+this.currentPageIndex+'页,共'+totalCount+'条，每页'+this.options.pageSize+'条.');
				
					if(this.currentPageIndex<=1){
						this.paginationElem.find('.pPrev').addClass('disabled');
					}else{
						this.paginationElem.find('.pPrev').removeClass('disabled');
					}
					
					if(this.currentPageIndex>=pageCount){
						this.paginationElem.find('.pNext').addClass('disabled');
					}else{
						this.paginationElem.find('.pNext').removeClass('disabled');
					}
					
					
				}
			},
			
			_initAction:function(){
				var that = this;
				this._on({
					'click .list-item':function(event){
						this._triggerSelect(event.currentTarget);
						return false;
					},
					
					'click [data-command=gridlistCommand]':function(event){
						var elem = $(event.currentTarget);
						var commandOptions = elem.data();
						
						this.execCommand(event.currentTarget,commandOptions);
						//阻止冒泡
						event.stopPropagation();
					}
				});
				
				if(this.paginationElem&&this.paginationElem.length){
					this.paginationElem.on('click','[data-command="gridListCommand"]:not(.disabled)',function(event){
						var elem = $(event.currentTarget);
						var commandOptions = elem.data();
						that.execCommand(event.currentTarget,commandOptions);
						//阻止冒泡
						event.stopPropagation();
					});
				}
			},
			
			_triggerSelect:function(itemDom){
				$(itemDom).toggleClass('selected');
				this._callGloablFunc('click',itemDom);
			},
			
			/**
			 * 添加外部查询参数
			 */
			addQueryParam:function(paramName,paramValue,operator){
				this.queryParams[paramName] = paramValue;
				if(operator){
					this.queryParams['operator:'+paramName] = operator;
				}
			},
			
			removeQueryParam:function(paramName){
				if(paramName&&this.queryParams){
					delete this.queryParams[paramName];
					delete this.queryParams['operator:'+paramName];
				}
			},
			
			_loadSrc:function(){
				var that = this;
				
				var params = this._getParams();
				
				$.youi.ajaxUtils.ajax({
					url:this.options.src,
					data:params.join('&'),
					success:function(results){
						if(results&&results.records){
							that._parseRecords(results.records,results.totalCount);
						}
					}
				});
			},
			
			reload:function(){
				this.currentPageIndex = 1;
				this._loadSrc();
			},
			
			prev:function(){
				this.currentPageIndex--;
				this._loadSrc();
			},
			
			next:function(){
				this.currentPageIndex++;
				this._loadSrc();
			},
			
			_getParams:function(){
				var params = [];
				//分页参数
				params = params.concat(this._getPagerParams());
				if(this.queryParams){
					for(var paramName in this.queryParams){
						//TODO 值为数组处理
						params.push($.youi.parameterUtils.propertyParameter(paramName,this.queryParams[paramName]));
					}
				}
				return params;
			},
			
			/**
			 * 分页查询参数
			 */
			_getPagerParams:function(){
				var pagerParams = [];
				pagerParams.push('pager:pageIndex='+this.currentPageIndex);
				pagerParams.push('pager:pageSize='+(this.options.pageSize<0?10:this.options.pageSize));
				return pagerParams;
			},
			
			_destroy:function(){
				//调用页面销毁函数
				this._callGloablFunc('destroy');
			}
		}));
		
	})(jQuery);

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);

	(function($) {
	//	var _log = $.youi.log;
		/**
		 *  form组件
		 * @author  zhouyi
		 * @version 1.0.0
		 */
		$.widget("youi.form",$.youi.abstractWidget,$.extend({},{
			options:{
				
			},
			/**
			 * 
			 */
			_initWidget:function(){
				if(this.options.dialog===true){
					this.element.dialog({
						width:(this.options.width||800)+28,
						title:this.options.caption,
						modal: true, 
						zIndex:this.options.zIndex,
						close:this.options.close
					});
					
					var dialogFooter = this.element.parents('.modal-dialog:first').find('.modal-footer');
					dialogFooter.empty().append(this.element.find('.form-buttons'));
					
					var that = this;
					dialogFooter.delegate('.youi-button','click',function(event){
						var commandOptions = $(event.currentTarget).data();
						
						that.execCommand(event.currentTarget,commandOptions,that.getFormRecord());
					});
				}
			},
			
			_initAction:function(){
				this.element.bind('submit.form',function(){
					$(this).form('submit');
					return false;
				});
				
				this._on({
					'keydown input.textInput':function(event){
						if(event.keyCode==13){
							this.submit();
						}
					},
					
					'click  .form-buttons>.btn-group>.youi-button:not(.disabled)':function(event){
						var elem = $(event.currentTarget);
						var commandOptions = elem.data();
						
						if(commandOptions.property&&$.youi.stringUtils.notEmpty(commandOptions.value)){
							//执行提交
							var extraRecord = [];
							extraRecord[commandOptions.property] = commandOptions.value;
							this.submit(null,null,extraRecord);
						}else{
							this.execCommand(event.currentTarget,commandOptions,this.getFormRecord());
						}
						
						//阻止冒泡
						return false;
					}
				});
				
			},
			/**
			 * 执行表单校验
			 */
			validate:function(){
				this.element.find('.youi-field').fieldValidate();
				if(this.element.find('.youi-field.validating,.youi-field.validate-error,.edited.validate-error').length==0){
					return true;
				}
				return false;
			},
			
			/**
			 * 
			 */
			getFormRecord:function(){
				var record = {};
				this.element.find('.youi-field').each(function(index){
					var property = $(this).data('property'),
						value;
					if(property){
						value = $(this).fieldValue();
						if(value){
							record[property] = value;
						}
						value = null;
					}
				});
				return record;
			},
			
			reset:function(){
				this.element.find('.youi-field').fieldReset();
				this._callGloablFunc('after_reset');
			},
			/**
			 * 表单提交操作
			 */
			submit:function(dom,options,extraRecord){
				
				var that = this;
				var formRecord = $.extend({},this.getFormRecord(),extraRecord);
				
				//表单校验
				if(this.validate()===false){
					
					var errorMessage = [];
					this.element.find('.youi-field.validating,.youi-field.validate-error,.edited.validate-error').each(function(){
						if(this.title)errorMessage.push(this.title);
					});
					$.youi.messageUtils.showError('<pre>'+errorMessage.join('\n')+'</pre>');
					this._releaseSubmitButton();
					return false;
				}
				
				if(this.options.confirmMessage){
					var confirmMsg = $.youi.recordUtils.replaceByRecord(this.options.confirmMessage,formRecord);
					$.youi.messageUtils.confirm(confirmMsg,function(){
						that._submit(formRecord);
					});
				}else{
					this._submit(formRecord);
				}
				
			},
			
			_submit:function(formRecord){
				
				//提交前动作
				if(this._callGloablFunc('beforeSubmit',formRecord)===false){
					//
					return false;
				}
				//recordToParameters
				var params = [],
					fieldValues = $.youi.recordUtils.recordToParameters(formRecord);
				
				params = params.concat($.youi.parameterUtils.toParams(fieldValues));
				
				var url = $.trim(this.element.attr('action'));
				if (url) {
					// clean url (don't include hash vaue)
					url = (url.match(/^([^#]+)/)||[])[1];
			   	}else{
			   		this._afterSubmit({'record':formRecord});
			   		return;
			   	}
			   	url = url || window.location.href || '';
			   	
				console.log(url+' '+params.join('&'));
				
				var that = this;
				var opts = {
					url:url,
					data:params.join('&'),
					dataType:this.options.dataType||'json',
					success:function(result){
						that._afterSubmit(result);
					},
					domainValidator:function(invalidMessages){//对象校验
						$.youi.messageUtils.showMessage($.youi.resourceUtils.get('form.invalid',invalidMessages.message.info));
					},
					error:function(errMsg){
						if(typeof(errMsg)==='string'){
							$.youi.messageUtils.showError(errMsg);
						}else{
							alert('后台页面'+this.url+'访问异常!');
						}
						that._releaseSubmitButton();
					}
				};
				
				this.element.find('[data-name=submit]').addClass('disabled');
				//ajax提交表单
				
				
				var found = false;
				$('.youi-field input:file', this.element).each(function(){
					if(this.value){
						found = true;
						return;
					}
				});
				
				
				if(found){
					var options = $.extend({},opts,{
						iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank',
						extraData:{}});
					
					$(fieldValues).each(function(){
						options.extraData[this.property] = this.value;
						that.element.find('[name='+this.property+']').removeAttr('name');
					});
					
					//
					//this.element.find('n');
					
					fileUpload(this.element,options);
				}else{
					$.youi.ajaxUtils.ajax(opts);
				}
			},
			
			goback:function(){
				//
				window.history.go(-1);
			},
			
			fillRecord:function(record){
				this.record = record;
				var idKeysCompare = ','+(this.options.idKeys||'')+','
				//var propertyMap = recordToStringMap(record);
				
				this.element.find('.youi-field').each(function(index){
					var property = this.getAttribute('data-property'),
						showProperty = $('.textInput:first',this).attr('showProperty'),
						value = $.youi.recordUtils.getPropertyValue(record,property);//propertyMap[property.replace(/\./g,'_')];
					
					if(value!=null&&value.length!=0){
						try{
							var show = !showProperty?null:$.youi.recordUtils.getPropertyValue(record,showProperty);
							var fieldElement = $(this);
							fieldElement.fieldValue(value,show);
							if(idKeysCompare.indexOf(','+property+',')!=-1){
								fieldElement.fieldDisabled();
							}
						}catch(err){
							//捕捉设置field值时可能抛出的异常
							_log.info('设置值异常：'+err);
						}
					}
				});
			},
			/**
			 * 
			 */
			find:function(src,after,customRecord){
				this.element.find('.youi-field').fieldReset();
				var self = this;
				$.youi.ajaxUtils.ajax({
					url:src,
					widgetId:this.options.id,
					afterFind:after,
					success:function(result){
						if(result&&result.record){
							$('#'+this.widgetId).form('fillRecord',$.extend({},result.record,customRecord));
							if($.isFunction(this.afterFind)){
								this.afterFind.apply(this,[result.record]);
							}
						}
					}
				});
			},
			
			_afterSubmit:function(result){
				this._releaseSubmitButton();
				
				if(this.options.dataType==='html'){
					//弹出框显示result
					var htmlResultDialogId = this.options.id+'_dialog_html';
					
					var dialogElem = $('#'+htmlResultDialogId);
					
					if(dialogElem.length===0){
						dialogElem = $('<div id="'+htmlResultDialogId+'"/>').appendTo($('body',document));
						dialogElem.dialog({
							title:this.options.caption,
							width:parseInt(this.options.width)+24
						});
					}
					
					dialogElem.html(result).dialog('open');
				}
				
				if(this.options.dialog==true){
					this.element.dialog('close');
				}
				
				this._callGloablFunc('afterSubmit',result);
			},
			
			close:function(){
				this.element.dialog('close');
			},
			
			
			_releaseSubmitButton:function(){
				this.element.find('[data-name=submit]').removeClass('disabled');
			},
			
			disableButton:function(name){
				if(!name)return;
				var buttons = [];
				if($.isArray(name)){
					buttons = name;
				}else{
					buttons.push(name);
				}
				for(var i=0;i<buttons.length;i++){
					this.element.find('button[data-name='+buttons[i]+']').addClass('disabled');
				}
			},
			
			enableButton:function(name){
				if(!name)return;
				var buttons = [];
				if($.isArray(name)){
					buttons = name;
				}else{
					buttons.push(name);
				}
				for(var i=0;i<buttons.length;i++){
					this.element.find('button[data-name='+buttons[i]+']').removeClass('disabled');
				}
			}
		}));
		
		
		// private function for handling file uploads (hat tip to YAHOO!)
		function fileUpload($form,options) {
			var form = $form[0];
			if ($(':input[name=submit]', form).length) {
				alert('Error: Form elements must not be named "submit".');
				return;
			}

			var opts = $.extend({}, $.ajaxSettings, options);
			var s = $.extend(true, {}, $.extend(true, {}, $.ajaxSettings), opts);

			var id = 'jqFormIO' + (new Date().getTime());
			var $io = $('<iframe id="' + id + '" name="' + id + '" src="'+ opts.iframeSrc +'" />');
			var io = $io[0];

			$io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });

			var xhr = { // mock object
				aborted: 0,
				responseText: null,
				responseXML: null,
				status: 0,
				statusText: 'n/a',
				getAllResponseHeaders: function() {},
				getResponseHeader: function() {},
				setRequestHeader: function() {},
				abort: function() {
					this.aborted = 1;
					$io.attr('src', opts.iframeSrc); // abort op in progress
				}
			};

			var g = opts.global;
			// trigger ajax global events so that activity/block indicators work like normal
			if (g && ! $.active++) $.event.trigger("ajaxStart");
			if (g) $.event.trigger("ajaxSend", [xhr, opts]);

			if (s.beforeSend && s.beforeSend(xhr, s) === false) {
				s.global && $.active--;
				return;
			}
			if (xhr.aborted)
				return;

			var cbInvoked = 0;
			var timedOut = 0;

			// add submitting element to data if we know it
			var sub = form.clk;
			if (sub) {
				var n = sub.name;
				if (n && !sub.disabled) {
					options.extraData = options.extraData || {};
					options.extraData[n] = sub.value;
					if (sub.type == "image") {
						options.extraData[name+'.x'] = form.clk_x;
						options.extraData[name+'.y'] = form.clk_y;
					}
				}
			}

			// take a breath so that pending repaints get some cpu time before the upload starts
			setTimeout(function() {
				// make sure form attrs are set
				var t = $form.attr('target'), a = $form.attr('action');

				// update form attrs in IE friendly way
				form.setAttribute('target',id);
				if (form.getAttribute('method') != 'POST')
					form.setAttribute('method', 'POST');
				if (form.getAttribute('action') != opts.url)
					form.setAttribute('action', opts.url);

				// ie borks in some cases when setting encoding
				if (! options.skipEncodingOverride) {
					$form.attr({
						encoding: 'multipart/form-data',
						enctype:  'multipart/form-data'
					});
				}

				// support timout
				if (opts.timeout)
					setTimeout(function() { timedOut = true; cb(); }, opts.timeout);

				// add "extra" data to form if provided in options
				var extraInputs = [];
				try {
					if (options.extraData)
						for (var n in options.extraData){
							if($form.find('input[name="'+n+'"]').length)continue;
							extraInputs.push(
								$('<input type="hidden" name="'+n+'" value="'+options.extraData[n]+'" />')
									.appendTo(form)[0]);
						}
					// add iframe to doc and submit the form
					$io.appendTo('body');
					io.attachEvent ? io.attachEvent('onload', cb) : io.addEventListener('load', cb, false);
					
					form.submit();
				}
				finally {
					// reset attrs and remove "extra" input elements
					form.setAttribute('action',a);
					t ? form.setAttribute('target', t) : $form.removeAttr('target');
					$(extraInputs).remove();
				}
			}, 10);

			var domCheckCount = 50;

			function cb() {
				if (cbInvoked++) return;
				
				io.detachEvent ? io.detachEvent('onload', cb) : io.removeEventListener('load', cb, false);

				var ok = true;
				try {
					if (timedOut) throw 'timeout';
					// extract the server response from the iframe
					var data, doc;

					doc = io.contentWindow ? io.contentWindow.document : io.contentDocument ? io.contentDocument : io.document;
					
					var isXml = opts.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
					//log('isXml='+isXml);
					if (!isXml && (doc.body == null || doc.body.innerHTML == '')) {
					 	if (--domCheckCount) {
							// in some browsers (Opera) the iframe DOM is not always traversable when
							// the onload callback fires, so we loop a bit to accommodate
							cbInvoked = 0;
							setTimeout(cb, 100);
							return;
						}
						_log.info('Could not access iframe DOM after 50 tries.');
						return;
					}

					xhr.responseText = doc.body ? doc.body.innerHTML : null;
					xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
					xhr.getResponseHeader = function(header){
						var headers = {'content-type': opts.dataType};
						return headers[header];
					};

					if (opts.dataType == 'json' || opts.dataType == 'script') {
						// see if user embedded response in textarea
						var ta = doc.getElementsByTagName('textarea')[0];
						if (ta)
							xhr.responseText = ta.value;
						else {
							// account for browsers injecting pre around json response
							var pre = doc.getElementsByTagName('pre')[0];
							if (pre)
								xhr.responseText = pre.innerHTML;
						}			  
					}
					else if (opts.dataType == 'xml' && !xhr.responseXML && xhr.responseText != null) {
						xhr.responseXML = toXml(xhr.responseText);
					}
					data = jQuery.parseJSON(xhr.responseText);//$.httpData(xhr, opts.dataType);
				}
				catch(e){
					ok = false;
					//$.handleError(opts, xhr, 'error', e);
					opts.error.apply(opts,[e]);
				}
				
				// ordering of these callbacks/triggers is odd, but that's how $.ajax does it
				if (ok) {
					if(!$.youi.ajaxUtils.resultsCheck(data,{error:opts.error,domainValidator:data.domainValidator})){
						return;
					}
					opts.success(data, 'success');
					if (g) $.event.trigger("ajaxSuccess", [xhr, opts]);
				}
				if (g) $.event.trigger("ajaxComplete", [xhr, opts]);
				if (g && ! --$.active) $.event.trigger("ajaxStop");
				if (opts.complete) opts.complete(xhr, ok ? 'success' : 'error');

				// clean up
				setTimeout(function() {
					$io.remove();
					xhr.responseXML = null;
				}, 100);
			};

			function toXml(s, doc) {
				if (window.ActiveXObject) {
					doc = new ActiveXObject('Microsoft.XMLDOM');
					doc.async = 'false';
					doc.loadXML(s);
				}
				else
					doc = (new DOMParser()).parseFromString(s, 'text/xml');
				return (doc && doc.documentElement && doc.documentElement.tagName != 'parsererror') ? doc : null;
			};
		};
	})(jQuery);

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);

	(function($) {
		'use strict';
		
		$.widget("youi.tabs",$.youi.abstractWidget,$.extend({},{
			
			_initWidget:function(){
				var tabContent = this.element.prev('.tab-content').before(this.element);
				this.tabContent = tabContent;
				//alert(this.element.data('hash'));
				if(this.options.pageHash===true){
					if(window.location.hash.indexOf($.youi.pageHashPrefix+':')==0){
						this._activeTabItem(0);
					}
				}else{
					this._activeTabItem(0);
				}
			},
			
			_activeTabItem:function(itemIndex){
				var item = this.element.find('li:eq('+itemIndex+')');
				if(item.length&&!item.is('.active')){
					item.find('>a').tab('show');
				}
			},
			
			_loadPanePage:function(tabItemId,item){
				var tabPaneElem = this.tabContent.find('>[data-id="'+tabItemId+'"]');
				
				var src = item.src||this.options.itemSrc;
				
				if(src&&tabPaneElem.length&&!tabPaneElem.is('.loaded')){
					console.log('load page:'+src);
					
					var paramRecord = $.extend({},this._callGloablFunc('paramRecord'),{id:tabItemId});
					var pageUrl = $.youi.pageUtils.parsePageUrl(src,paramRecord);
					
					$.youi.pageUtils.loadPage(tabPaneElem,pageUrl,function(){
						$(this).addClass('loaded');
					});
				}
			},
			
			_initAction:function(){
				var that  = this;
				
				this.element.delegate('>li>a','shown.bs.tab',function(event){
					//设置pagehash
					var tabItemId = event.currentTarget.getAttribute('data-id');
					
					if(that.options.pageHash===true){
						$(event.delegateTarget).trigger('setpagehash',{hash:tabItemId});
					}
					//加载远程页面数据
					that._loadPanePage(tabItemId,$(event.currentTarget).parent().data());
				});
				
				if(this.options.pageHash===true){
					this._on({
						'setpagehash':function(event,ui){
							if(ui.hash){
								var hashes = [];
								this.element.parents('[data-hash]').each(function(){
									hashes.push($(this).data('hash'));
								});
								window.location.hash='p_'+ui.hash+':'+hashes.join('|');
							}else{
								//加载第一个页面
								this._activeTabItem(0);
							}
							return false;
						},
						'pagehash':function(event,ui){
							if(ui.partHash){
								var tabA = this.element.find('>li a[data-id="'+ui.partHash+'"]');
								if(!tabA.parent().is('.active')){
									tabA.tab('show');
								}
							}
							//阻止冒泡
							return false;
						}
					});
				}else{
					
				}
			},
			/**
			 * 打开标签页
			 */
			openTabitem:function(tabId){
				//
				if(tabId&&typeof(tabId)=='string'){
					var tabitemElem = this.element.find('#'+tabId);
					tabitemElem.tab('show');
					
					var itemSrc = tabitemElem.data('src')||this.options.itemSrc;
					//动态加载页面
					if(itemSrc){
						var panelElem = $(tabitemElem.attr('href'));
						//
						if(panelElem.length&&!panelElem.hasClass('loaded')){
							var paramRecord = $.extend({},this._callGloablFunc('paramRecord'),{id:tabitemElem.attr('id')});
							var pageUrl = $.youi.pageUtils.parsePageUrl(itemSrc,paramRecord);
							
							$.youi.pageUtils.loadPage(panelElem,pageUrl,function(){
								
							});
						}
					}
				}
			}
		
		}));
		
	})(jQuery);

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2015, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2015-6-24
	 */
	__webpack_require__(1);
	(function($) {
		var _log = $.youi.log;

		var progressbar = $.widget( "youi.progressbar", {
			options: {
				max: 100,
				value: 0,

				change: null,
				complete: null
			},

			min: 0,

			_create: function() {
				// Constrain initial value
				this.oldValue = this.options.value = this._constrainedValue();

				this.element
					.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
					.attr({
						// Only set static values, aria-valuenow and aria-valuemax are
						// set inside _refreshValue()
						role: "progressbar",
						"aria-valuemin": this.min
					});

				this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
					.appendTo( this.element );

				this._refreshValue();
			},

			_destroy: function() {
				this.element
					.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
					.removeAttr( "role" )
					.removeAttr( "aria-valuemin" )
					.removeAttr( "aria-valuemax" )
					.removeAttr( "aria-valuenow" );

				this.valueDiv.remove();
			},

			value: function( newValue ) {
				if ( newValue === undefined ) {
					return this.options.value;
				}

				this.options.value = this._constrainedValue( newValue );
				this._refreshValue();
			},

			_constrainedValue: function( newValue ) {
				if ( newValue === undefined ) {
					newValue = this.options.value;
				}

				this.indeterminate = newValue === false;

				// sanitize value
				if ( typeof newValue !== "number" ) {
					newValue = 0;
				}

				return this.indeterminate ? false :
					Math.min( this.options.max, Math.max( this.min, newValue ) );
			},

			_setOptions: function( options ) {
				// Ensure "value" option is set after other values (like max)
				var value = options.value;
				delete options.value;

				this._super( options );

				this.options.value = this._constrainedValue( value );
				this._refreshValue();
			},

			_setOption: function( key, value ) {
				if ( key === "max" ) {
					// Don't allow a max less than min
					value = Math.max( this.min, value );
				}
				if ( key === "disabled" ) {
					this.element
						.toggleClass( "ui-state-disabled", !!value )
						.attr( "aria-disabled", value );
				}
				this._super( key, value );
			},

			_percentage: function() {
				return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
			},

			_refreshValue: function() {
				var value = this.options.value,
					percentage = this._percentage();

				this.valueDiv
					.toggle( this.indeterminate || value > this.min )
					.toggleClass( "ui-corner-right", value === this.options.max )
					.width( percentage.toFixed(0) + "%" );

				this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );

				if ( this.indeterminate ) {
					this.element.removeAttr( "aria-valuenow" );
					if ( !this.overlayDiv ) {
						this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
					}
				} else {
					this.element.attr({
						"aria-valuemax": this.options.max,
						"aria-valuenow": value
					});
					if ( this.overlayDiv ) {
						this.overlayDiv.remove();
						this.overlayDiv = null;
					}
				}

				if ( this.oldValue !== value ) {
					this.oldValue = value;
					this._trigger( "change" ,null,{percentage:percentage});
				}
				if ( value === this.options.max ) {
					this._trigger( "complete" );
				}
			}
		});
	})(jQuery);

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-3-3
	 */

	__webpack_require__(1);

	(function($) {
		'use strict';
		
		var _log = $.youi.log;
		
		/**
		 * 树组件
		 */
		$.widget("youi.tree",$.youi.abstractWidget,$.extend({},{
			
			options: {
				serverPath:'',//服务器路径
				srcDataType:'json',//树节点数据类型
				dataParse:function(results,treeOptions){//默认的子节点数据解析器
					//this.treeOptions 树的参数
					//this.treeNodeElement 当前树节点元素
					var treeOptions = $.extend({},treeOptions,treeNodeElementOptions(this.treeNodeElement)),
						nodeOptions = treeNodeElementOptions(this.treeNodeElement);
					if(treeOptions.srcDataType=='xml'){//解析xml
						parseXml(this.treeNodeElement,treeOptions,nodeOptions,results);
					}else if(treeOptions.srcDataType=='json'){//解析json
						parseJson(this.treeNodeElement,treeOptions,nodeOptions,results);
					}
					return '';
				},
				root:'根节点',
				idAttr:'value',
				textAttr:'show',
				autoLoad:true,//自动加载第一层数据
				//triggerEvent:'click',
				checkedChildren:true,
				checkedParents:true,
				dragDrop:false,
				dragStyles:['treeNode'],
				delay: 0,//
				distance: 1,
				mixed:false
			},
			
			/**
			 * 组件初始化
			 */
			_initWidget:function(){
				if(this.options.children){
					var rootId = this.options.rootId||('root_'+new Date().getTime());
					var treeHtmls = treeNodeHtml(rootId,this.options.rootText,{},{
						group:'root',
						children:this.options.children
					});
					
					this.element.html('<ul>'+treeHtmls+'</ul>');
				}else if(this.options.iteratorSrc&&this.options.autoLoad==true){
					//配置了迭代类型数据，开启自动加载
					this.loadIteratorRoot();
				}else{
					//隐藏未展开的节点的ul
					this.element.find('li.treeNode.expandable:not(.expanded)>ul').hide();
				}
				
				//展开第一个节点
				this._triggleNode(this.element.find('li:first:not(.expanded)'));
				
				if(this.options.dragable===true){
					this.options.container = this.options.container||$('body',document);
					//可拖动的
					this._mouseInit();//
				}
			},
			
			loadIteratorRoot:function(){
				if(!this.options.iteratorSrc)return;
				if(this.element.find('li.root').length==0){
					var o = this.options;
					var rootSrc = this.options.iteratorSrc;
					rootSrc = rootSrc+(rootSrc.indexOf("?")==-1?'?':'&')+this.options.iteratorParentAttr+'=';
					this.element.html('')
						.append('<ul><li class="treeNode root" src="'+rootSrc+'" code="'+o.idAttr+'" show="'+o.textAttr+'"><span class="root"><a class="tree-a">'+o.root+'</a></span></li></ul>');
					var rootElement = this.element.find('li:first');
					this._loadSrc(rootElement,this.options.after);
				}
			},
			/**
			 * 事件绑定
			 */
			_initAction:function(){
				this._on({
					'dblclick li.treeNode>span':function(event){
						this._triggleNode(event.currentTarget.parentNode);
					},
					'click li.treeNode>span':function(event){
						this._selectedNode(event.currentTarget.parentNode);
					},
					'click li.treeNode>.tree-trigger':function(event){
						this._triggleNode(event.currentTarget.parentNode);
					},'contextmenu li.treeNode>span':function(event){
						//
						if(this.options.xmenu){
							this._showContextmenu(event,$(event.currentTarget.parentNode));
						}
						return false;
					},'contextmenuAction li.treeNode':function(event,ui){
						//右键菜单动作监听
						if(ui.name){
							this._callGloablFunc('xmenu_'+ui.name,$(event.currentTarget));
						}
						//
						return false;
					}
				});
			},
			/**
			 * 左键菜单
			 */
			_showContextmenu:function(event,treeNodeElement){
				if(this.options.xmenu){
					var menuElem = $('#'+this.options.xmenu),
						groups = ['property:'+_getTreeNodeText(treeNodeElement)].concat(treeNodeElement[0].className.split(' ')),
						pageOffset = menuElem.parents('.page-container:first').offset();
					//
					menuElem.trigger('open',{
							bind:treeNodeElement[0],
							left:event.pageX - pageOffset.left - 25,
							top:event.pageY - pageOffset.top - 15,
							groups:groups
						});
				}
			},
			
			/**
			 * 拖动开始
			 */
			_mouseStart: function(event) {
				var dragElem = $(event.target);
				
				var nodeElem = dragElem.is('li.treeNode')?dragElem:dragElem.parents('.treeNode:first');
				
				if(nodeElem.hasClass(this.options.dragStyles)){
					this.currentDrag = nodeElem;
					
					this.currentDragData = $.extend({},{
						id:this.currentDrag.attr('id'),
						text:this.currentDrag.find('>span>a').text(),
						groups:this.currentDrag[0].className.split(' ')
					},this.currentDrag.data());
					
					this.helper = this._createHelper(event,nodeElem.find('>span'));
				}
			},
			/**
			 * 拖动中
			 */
			_mouseDrag: function(event) {
				var dropElem = $(event.target);
				
				if(this.helper){
					this.position = this._generatePosition(event);
					this.helper.css(this.position);
				}
				
				//移入可接收的元素
				if(dropElem.hasClass(this.options.dropStyles)){
					if(this.currentDrop&&this.currentDrop[0]!==dropElem[0]){
						//移出可接收元素
						this._releaseDrop();
					}else{
						dropElem.addClass('droping');
						this.currentDrop = dropElem;
						//触发移动到元素的drop事件
						dropElem.trigger('droping',this.currentDragData);
					}
				}else{
					this._releaseDrop();
				}
			},
			
			_releaseDrop:function(){
				if(this.currentDrop){
					this.currentDrop.removeClass('droping');
					this.currentDrop.trigger('dropout',{});
					this.currentDrop = null;
				}
			},
			/**
			 * 拖动结束
			 */
			_mouseStop: function(event) {
				if(this.helper&&this.currentDrag&&this.currentDrop){
					//widget
					var ui = $.extend({},{
							id:this.currentDrag.attr('id'),
							text:this.currentDrag.find('>span>a').text(),
							groups:this.currentDrag[0].className.split(' ')
						},this.currentDrag.data());
					
					this.currentDrop.trigger('dropStop',this.currentDragData);
					
					this.currentDrop.removeClass('droping');
				}
				
				this.helper&&this.helper.remove();
				
				this.helper = null;
				this.currentDrop = null;
				this.currentDrag = null;
				this.currentDragData = null;
			},
			/**
			 * 
			 */
			_createHelper:function(event,dragElement){
				var helper = $('<span class="drop-yes" id="tree-drop-helper"></span>').append(dragElement.clone());
				
				if(!helper.parents('body').length)
					helper.appendTo(this.options.container?this.options.container:this.currentDrag);
		
				if(helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))
					helper.css("position", "absolute");
				
				helper.css('zIndex','9999');
				return helper;
			},
			
			_generatePosition: function(event) {
				//TODO 计算位置需要考虑多中情况 
				// 来源自jquery ui的draggable 考虑的特殊情况
				// This is another very weird special case that only happens for relative elements:
				// 1. If the css position is relative
				// 2. and the scroll parent is the document or similar to the offset parent
				// we have to refresh the relative offset during the scroll so there are no jumps
				var pageX = event.pageX,pageY = event.pageY;
				var offset = this.options.container?this.options.container.offset():this.element.offset();
				return {
					top:pageY+10-offset.top,
					left:pageX+5-offset.left
				};
			},
			
		
			
			_triggleNode:function(nodeDom){
				var nodeElement = $(nodeDom);
				nodeElement.toggleClass('expanded');
				
				if(nodeElement.hasClass('expanded')){
					this._expandNode(nodeElement);
				}else{
					this._collapseNode(nodeElement);
				}
			},
			
			
			_collapseNode:function(treeNodeElement){
				treeNodeElement.find('>ul').hide();
			},
			
			/**
			 * 展开树节点
			 */
			_expandNode:function(treeNodeElement,data,afterExpand){
				var o   = this.options,
					src = treeNodeElement.data('src')||treeNodeElement.attr('src');
				//回调的参数处理
				afterExpand=afterExpand||data;
				data = afterExpand&&data;
				
				treeNodeElement.find('>ul').show();
				
				if(src&&!treeNodeElement.hasClass('loaded')){
					treeNodeElement.addClass('loaded');
					this._loadSrc(treeNodeElement,data,afterExpand);
				}else{
					if($.isFunction(afterExpand)){
						afterExpand.apply(treeNodeElement[0],[data]);
					}
				}
				
				treeNodeElement.addClass('expanded');
				//
				if(!$.support.boxModel){
					this.element.find('>tree-trigger').css({'position':'absolute'});
				}
				this.element.scrollTop(0);
			},
			
			_selectedNode:function(nodeDom){
				var nodeElement = $(nodeDom);
				
				if(!nodeElement.hasClass('selected')){
					nodeElement.addClass('selected');
					
					this.element.find('.selected').not(nodeElement).removeClass('selected');
					//
					this._callGloablFunc('select',nodeElement);
					
					if($.isFunction(this.options.select)){
						this._trigger('select',this.options.select,{selectedNode:nodeElement});
					}
				}
				
				if(nodeElement.hasClass('check')){
					nodeElement.toggleClass('checked');
					
					if(nodeElement.hasClass('checked')){//选择状态
						//全部选择子节点 checkedChildren
						if(this.options.checkedChildren){
							nodeElement.find('li.treeNode').addClass('checked');
						}
						//checkedParents
						if(this.options.checkedParents){
							nodeElement.parents('li.treeNode').addClass('checked');
						}
					}else{//撤销选择状态
						if(this.options.checkedChildren){
							nodeElement.find('li.treeNode.checked').removeClass('checked');
						}
						
	//					if(this.options.checkedParents){
	//						
	//					}
					}
					
				}
			},
			
			_loadSrc:function(treeNodeElement,data,afterExpand){
				var o   = this.options,
					src = treeNodeElement.data('src')||treeNodeElement.attr('src');
				afterExpand=afterExpand||data;
				data = afterExpand&&data;
				treeNodeElement.find('span:first').addClass('loading');
				$.youi.ajaxUtils.ajax({
					url:src,
					//type:this.options.methodType||'GET',
					dataType:o.srcDataType,
					contentType:'application/x-www-form-urlencoded;charset=UTF-8',
					dataParse:o.dataParse,
					element:this.element,
					treeNodeElement:treeNodeElement,//传入当前展开的节点
					afterExpand:afterExpand,
					afterExpandData:data,//附加参数：展开函数的参数
					success:function(results){//成功读取数据
						this.dataParse.apply(this,[results,o]);//执行数据解析器
						this.treeNodeElement.addClass('loaded').find('span:first').removeClass('loading');//
						var lastNode = this.treeNodeElement.find('>ul>li:last');
						lastNode.addClass('last');
						
						this.treeNodeElement.find('ul:first').show();
						if(lastNode.hasClass('expandable')){
							lastNode.addClass('lastExpandable');
						}
						if($.isFunction(this.afterExpand)){
							this.afterExpand.apply(this.treeNodeElement[0],[this.afterExpandData]);
						}
						this.dataParse = null;
						this.treeNodeElement = null;
						this.element = null;
						this.afterExpand = null;
					},error:function(errorMessage){
						//alert(errorMessage);
						_log.error(errorMessage);
					}
				});
			},
			
			/**
			 * @param nodeElement  增加的节点的目标节点元素
			 * @param childElement 增加的节点元素
			 */
			_addChild:function(nodeElement,childElement){
				var ul = nodeElement.find('>ul');
				if(ul.length==0){
					ul = $('<ul></ul>').appendTo(nodeElement);
				}else{
					//移除原始末尾节点的末样式
					removeLastStyleClass(ul.find('>li:last'));
				}
				//处理目标节点的样式
				if(ul.children().length==0){//目标节点没有子节点的情况
					nodeElement.addClass('expandable expanded').children('span:first').addClass('expandable expanded');
					//如果当前目标节点为末节点，则增加展开状态的末节点样式
					if(nodeElement.hasClass('last')){
						nodeElement.addClass('lastExpanded');
					}
					nodeElement.prepend('<div class="tree-trigger"></div>');
				}
				lastStyleClass(childElement);//设置增加的节点为末样式
				ul.append(childElement);
			},
			
			_addBefore:function(nodeElement,childElement){
				nodeElement.before(childElement);
			},
			
			_addAfter:function(nodeElement,childElement){
				nodeElement.after(childElement);
				if(nodeElement.is('.last')){
					nodeElement.removeClass('last').removeClass('lastExpandable').removeClass('lastExpanded');
					childElement.addClass('last');
				}
			},
			
			/**
			 * 移除树节点
			 */
			_removeNode:function(treeNodeElement){
				if(treeNodeElement.length==0||treeNodeElement.hasClass('root'))return;
				//var parentNodeElement = treeNodeElement.parent().parent();
				this._relativeNodeByRemove(treeNodeElement);
				this.selectedNode(null,this._nextNode(treeNodeElement));
				treeNodeElement.remove();
			},
			
			
			/**
			 * 选中节点
			 */
			selectedNode:function(event,treeNodeElement){
				this._selectedNode(treeNodeElement);
			},
			
			/**
			 * 
			 */
			_nextNode:function(treeNodeElement){
				var nextNode = treeNodeElement.next();
				if(nextNode.length==0){
					nextNode = treeNodeElement.parent().parent();
				}
				if(nextNode.hasClass('root')){
					nextNode = nextNode.find('li.treeNode:first');
				}
				return nextNode;
			},
			
			/**
			 * 处理移除节点的相关节点的样式
			 */
			_relativeNodeByRemove:function(treeNodeElement){
				if(treeNodeElement.is('.last')){//处理拖动节点的原始父节点样式
					var prev = treeNodeElement.prev(),//记录拖动节点的拖动前的前一个树节点
						parentElement = treeNodeElement.parent().parent();//记录拖动节点的拖动前的父节点
					if(prev.length>0){
						lastStyleClass(prev);//设置前一个节点为末节点
					}else{//没有兄弟节点处理
						parentElement.removeClass('expandable').removeClass('expanded');
						parentElement.children('span:first').removeClass('expandable').removeClass('expanded');
						
						parentElement.removeClass('lastExpanded').removeClass('lastExpandable');
							
						if(!$.support.boxModel){
							parentElement.find('>ul').hide();
						}
					}
					treeNodeElement.removeClass('last');
				}
			},
			
			/**
			 * 定位路径节点
			 * @nodePath 节点轨迹路径 
			 * @example treeElement.tree('openPath','12/1203/120301000000')
			 */
			openPath:function(nodePath){
				if(!nodePath)return;
				
				if(nodePath.indexOf('/')==0){
					nodePath = nodePath.substring(1);
				}
				
				var self  = this,
					paths = nodePath.split('/'),
					nodeId = paths.shift(),
					treeNodeElement = this.element.find('li#'+nodeId);
				if(treeNodeElement.length==0)return;//如果没有找到树节点，返回
				
				if(paths.length==0){
					this._selectedNode(treeNodeElement);//选中节点
					//定位节点
					treeNodeElement.find('a:first').focus();
				}else{//展开节点
					this._expandNode(treeNodeElement,{treeElement:this.element[0],subPath:paths.join('/')},function(data){
						$(data.treeElement).tree('openPath',data.subPath);
					});
				}
			},
			
			/**
			 * 获得选择节点
			 */
			getSelected:function(){
				var selectedNode = this.element.find('li.treeNode.selected');
				return selectedNode.length==0?null:selectedNode;
			},
			
			/**
			 * ajax 删除节点
			 */
			ajaxRemoveNode:function(treeNode,src,idAttr,idValue,message){
				if(!src)return;
				var that = this;
				
				$.youi.messageUtils.confirm(message||'确认删除？',function(){
					$.youi.ajaxUtils.ajax({
						url:src,
						type:'GET',
						data:$.youi.parameterUtils.propertyParameter(idAttr,idValue),
						success:function(result){
							that._removeNode(treeNode);//物理删除节点
						}
					});
				});
			},
			
			/**
			 * 增加节点
			 */
			addNode:function(relativeNode,id,text,attributes,data,afterAdd,type){
				var addNodeHtml = treeNodeHtml(id,text,attributes,data),
					treeNode = relativeNode||this.getSelected()||this.element.find('li:first');
				var execAfterAdd = true;
				if(!treeNode||treeNode.length==0)return;
				
				var treeNodeElem = $(addNodeHtml);
				switch(type){
					case 'before':
						this._addBefore(treeNode,treeNodeElem);
						break;
					case 'after':
						this._addAfter(treeNode,treeNodeElem);
						break;
					default:
						if(!treeNode.hasClass('expandable')||treeNode.hasClass('expanded')){
							this._addChild(treeNode,treeNodeElem);
						}else{//未展开状态先展开树节点
							execAfterAdd = false;
							var data = {tree:this,treeNode:treeNode,addNodeHtml:addNodeHtml,afterAdd:afterAdd};
							this._expandNode(treeNode,data,function(data){
								if(!$(this).data('src')||$(this).hasClass('loaded')){//
									data.tree._addChild($(this),treeNodeElem);
								}
								if($.isFunction(data.afterAdd)){
									data.afterAdd.apply(this,[id]);
								}
								data = null;
							});
							data = null;
						}
				}
				//
				if(execAfterAdd&&$.isFunction(afterAdd)){
					afterAdd.apply(treeNode[0],[id]);
				}
				
				return treeNodeElem;
			}
		}));
		
		
		/**
		 * 设置节点样式为未节点样式
		 */
		function lastStyleClass(nodeElement){
			if(!nodeElement||nodeElement.length==0)return;
			nodeElement.addClass('last');
			if(!$.support.boxModel&&nodeElement.hasClass('expandable')){//可展开的节点
				if(nodeElement.hasClass('expanded')){
					nodeElement.addClass('lastExpanded');
				}else{
					nodeElement.addClass('lastExpandable');
				}
			}
		}
		/**
		 * 移除节点的未节点样式
		 */
		function removeLastStyleClass(nodeElement){
			if(!nodeElement||nodeElement.length==0)return;
			nodeElement.removeClass('last').removeClass('lastExpanded').removeClass('lastExpandable');
		}
		/**
		 * 解析json格式数据
		 * @param treeNodeElement 	加载数据的树节点
		 * @param treeOptions     	树参数
		 * @param treeOptions     	节点参数
		 * @param results		  	树节点src访问返回的数据
		 */
		function parseJson(treeNodeElement,treeOptions,nodeOptions,results){
			var records = results.records,
				htmls	   = ['<ul>'],
				iteratorSrc= (nodeOptions.leaf)?null:treeOptions.iteratorSrc,
				iteratorParentAttr = treeOptions.iteratorParentAttr,
				idAttr	   = nodeOptions.idAttr||treeOptions.idAttr,
				textAttr   = nodeOptions.textAttr||treeOptions.textAttr||'',
				textAttrs   = textAttr.split('.');
			
			if(!records||records.length==0){
				treeNodeElement.removeClass('expandable').removeClass('expanded').removeClass('lastExpandable')
					.find('>span').removeClass('expandable').removeClass('expanded');
				return;
			}
			$(records).each(function(){
				var text;
				if(textAttrs.length>1){
					text = this[textAttrs[0]][textAttrs[1]];
				}else{
					text = this[textAttr]||this.text;
				}
				var id = this[idAttr]||this.id,
					src  = this.src||(!iteratorSrc?null:$.youi.parameterUtils.connectParameter(iteratorSrc,iteratorParentAttr,id)),
					attributes = {//写入dom节点的属性
						code:this.code
					},
					data = {//参数
						leaf:this['leaf'],
						check:this['check']||treeOptions.check,
						group:this.group,
						tooltips:this.tooltips,
						icon:this.icon,
						expanded:this.expanded,
						children:this.children
					};
					if(src){
						$.extend(attributes,{
							src:this['src']||src,
							idAttr:this['idAttr']||idAttr,
							textAttr:this['textAttr']||textAttr
						});
					}
				if(id&&text){
					var treeText =treeOptions.mixed==true?("("+id+")"+text):text;
					htmls.push(treeNodeHtml(id,treeText,$.extend({},attributes),data));
				}
				attributes = null;
				data = null;
			});
			htmls.push('</ul>');
			treeNodeElement.append(htmls.join(''));
		}
		
		
		/**
		 * 生成单个树节点的html
		 * @param id   树节点id
		 * @param text 树节点文本
		 * @param data 树节点的参数
		 */
		function treeNodeHtml(id,text,attributes,data){
			data = data||{};
			attributes = attributes||{};
			
			var htmls = ['<li id="'+id+'"'],
				classNames = ['treeNode'],
				spanClassNames = ['tree-span'],//ie6
				expandable = false,
				treeTriggerHtml = '';//trigger辅助
			
			//如果存在src属性，并且标识为非叶子节点  leaf=true leaf=1
			var isLeaf = (data.leaf==true||data.leaf=='1')?true:false;//data.leaf
			//是否直接带子节点数据
			var hasChildren = $.isArray(data.children)&&data.children.length;
			//
			if(!isLeaf&&(attributes.src||hasChildren)){
				classNames.push('expandable');
				spanClassNames.push('expandable');
				treeTriggerHtml = '<div class="tree-trigger"></div>';
			}
			if(data.check){
				classNames.push('check');
				spanClassNames.push('check');
				if(data.check!=true){
					classNames.push(data.check);
					spanClassNames.push(data.check);
				}
			}
			
			if(data.group){
				classNames.push(data.group);
				spanClassNames.push(data.group);
			}
			
			if(data.icon){
				classNames.push('use-icon');
			}
			
			if(data.expanded){
				classNames.push('expanded');
			}
			
			htmls.push(' class="'+classNames.join(' ')+'" ');
			if(attributes){
				for(var attribute in attributes){
					if(attributes[attribute]){
						htmls.push(' data-'+attribute);
						htmls.push('="');
						htmls.push(attributes[attribute]+'" ');
					}
				}
			}
			htmls.push('>');
			htmls.push(treeTriggerHtml);
			
			htmls.push('<span title="'+text+'" '+(spanClassNames?'class="'+spanClassNames.join(' ')+'"':'')+'>');
			
			if(data.icon){
				htmls.push('<i class="youi-icon icon-'+data.icon+'"></i>');
			}
			htmls.push('<a class="tree-a" href="#">');
			htmls.push(text);
			
			htmls.push('</a>');
			
			if(data.tooltips){
				htmls.push('<span class="tree-node-hint">['+data.tooltips+']</span>');
			}
			
			htmls.push('</span>');
			
			if(hasChildren){
				htmls.push('<ul '+(data.expanded?'':'style="display:none;"')+'>');
				
				for(var i=0;i<data.children.length;i++){
					var childData = data.children[i];
					childData.check = data.check;
					htmls.push(treeNodeHtml(childData.id,childData.text,{src:childData.src,code:childData.code,check:data.check},childData));
					childData = null;
				}
				htmls.push('</ul>');
			}
			
			htmls.push('</li>');
			return htmls.join('');
		}
		
		/**
		 * 从树dom节点上返回与展开相关的参数
		 */
		function treeNodeElementOptions(treeNodeElement){
			var nodeOptions = {
				src:treeNodeElement.data('src'),
				idAttr:treeNodeElement.data('idattr'),
				textAttr:treeNodeElement.data('textattr')
				//leaf:treeNodeElement.attr('leaf')
			};
			return nodeOptions;
		}
		
		function _getTreeNodeText(treeNodeElement){
			return treeNodeElement.find('>span>a').text();
		}
		
	})(jQuery);

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);

	(function($) {
	//	var _log = $.youi.log;
		/**
		 *  page组件
		 * @author  zhouyi
		 * @version 1.0.0
		 */
		
		$.widget("youi.page",$.youi.abstractWidget,$.extend({},{
			options:{
				bindResize:true
			},
			
			_initWidget:function(){
				var that = this,
					initFuncName = 'P_'+this.options.pageId+'_init';
				//
				var caption = this.element.data('caption')||'';
				if(!this.element.parent().is('.youi-subpage')&&caption){
					$('body',document).trigger('pagetitle',{title:caption});
				}
				
				//调用初始化函数
				if(this.options.dataSrc){
					//获取数据
					$.youi.ajaxUtils.ajax({
						url:this.options.dataSrc,
						success:function(result){
							that.__callGloablFunc(initFuncName,result);
						}
					});
				}else{
					this.__callGloablFunc(initFuncName,{});
				}
				
				//触发resize事件
				$(window).trigger('resize');
			},
			
			_initAction:function(){
				this._on({
					'setpagehash [data-hash]':function(event,ui){
						return false;
					},
					'click [data-command="pageCommand"]:not(.disabled)':function(event){
						var elem = $(event.currentTarget);
						var commandOptions = elem.data();
						this.execCommand(event.currentTarget,commandOptions);
						//阻止冒泡
						event.stopPropagation();
					}
				});
			},
			
			_destroy:function(){
				//调用页面销毁函数
				this._callGloablFunc('destroy');
			}
		}));
		
	})(jQuery);

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-4
	 */

	__webpack_require__(1);

	(function($) {
	//	var _log = $.youi.log;
		/**
		 *  page组件
		 * @author  zhouyi
		 * @version 1.0.0
		 */
		
		$.widget("youi.subpage",$.youi.abstractWidget,$.extend({},{
			options:{
				bindResize:true,
				width:800
			},
			
			_initWidget:function(){
				if(this.options.type==='dialog'){
					var formConfirm = this.options.formConfirm;
					this.element.dialog({
						title:this.options.caption,
						width:parseInt(this.options.width)+24,
						buttons:this.options.buttons,
						submit:this.options.formSubmit||'提交',
						confirmMessage:this.options.formConfirm,
						submitAction:this.options.formAction?function(){
							$(this).form('submit');
						}:null
					});
					
					if(this.options.formAction){
						this.element.addClass('youi-form').form({
							id:this.options.id,
							findAction:this.options.editSrc,
							idKeys:this.options.idKeys,
							initHtml:false
						});
					}
					
					this.element.parents('.modal-content:first').delegate('button[data-property]','click',function(event){
						//提交
						var btnOptions = $(event.currentTarget).data();
						if(!btnOptions.property||$.youi.stringUtils.isEmpty(btnOptions.value)){
							return;
						}
						var extraData = {};
						extraData[btnOptions.property] = btnOptions.value;
						if(btnOptions.confirm){
							$.youi.messageUtils.confirm(btnOptions.confirm,function(){
								$('.youi-form:first',event.delegateTarget).form('submit',null,btnOptions,extraData);
							});
						}else{
							$('.youi-form:first',event.delegateTarget).form('submit',null,btnOptions,extraData);
						}
					});
				}
			},
			
			_initAction:function(){
				
			},
			
			open:function(options,subtitle,params){
				//打开subpage
				switch(this.options.type){
					case 'page':
						this._openPage(options,params);
						break;
					case 'window':
						break;
					case 'dialog':
						this._openDailog(options,params);
						break;
				}
			},
			/**
			 * 在当前页面打开
			 */
			_openPage:function(options,paramObj){
				var pageContainer = this.element.parents('.page-container:first');
				if(pageContainer.length){
					var hash = $.youi.pageUtils.parsePageUrl(this.options.src,paramObj);
					pageContainer.trigger('setpagehash',{hash:hash,canBack:true,autoLoadData:record.autoLoadData});
				}
			},
			
			
			_openDailog:function(options,paramObj){
				this.element.dialog('open',options);
				var that = this;
				var pageUrl = $.youi.pageUtils.parsePageUrl(this.options.src,paramObj);
				//加载页面
				if(pageUrl!=this.options.src||!this.element.hasClass('loaded')){
					$.youi.pageUtils.loadPage(this.element,pageUrl,function(){
						//把
						that._renderPropertyButtons($('>.youi-page>button[data-property]',this));
					});
				}
				
				if(this.options.formAction){
					var formAction = $.youi.pageUtils.parsePageUrl(this.options.formAction,paramObj);
					this.element.attr('action',formAction);
				}
			},
			
			_renderPropertyButtons:function(buttonElems){
				var btnContainer = this.element.parents('.modal-content:first').find('.modal-footer:last');
				btnContainer.find('button[data-property]').remove();
				btnContainer.prepend(buttonElems);
			},
			
			_destroy:function(){
				//调用页面销毁函数
				this._callGloablFunc('destroy');
			}
		}));
		
	})(jQuery);

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		/**
		 * 表单布局组件
		 */
		$.widget("youi.fieldLayout",$.youi.abstractWidget,$.extend({},{
			options:{
				
			},
			
			_initWidget:function(){
				//初始化属性
				this.fields = [];
				//初始化模型
				this._initFieldModels();
				
				this._initFields();
			},
			
			/**
			 * 初始化字段集模型
			 */
			_initFieldModels:function(){
				if(!this.options.fields||!this.options.fields.length)return;
				
				var optionsFields = this.options.fields,
					fields = [],
					prefix		= this.options.prefix;
				$(optionsFields).each(function(index){
					
					var fieldId = $.youi.fieldUtils.getFieldId(this.property,prefix),
						prevField = '',
						nextField = '';
					//功能权限过滤 TODO
					
					//获得上一个可见字段
					var prevIndex = index-1;
					while(optionsFields[prevIndex]){
						if(optionsFields[prevIndex].type!='fieldHidden'){
							prevField=$.youi.fieldUtils.getFieldId(optionsFields[prevIndex].property,prefix);
							break;
						}
						prevIndex--;
					}
					//获得下一个可见字段
					var nextIndex = index+1;
					while(optionsFields[nextIndex]){
						if(optionsFields[nextIndex].type!='fieldHidden'){
							nextField=$.youi.fieldUtils.getFieldId(optionsFields[nextIndex].property,prefix);
							break;
						}
						nextIndex++;
					}
					if(this.parentProperties&&this.parentProperties.length){
						var parentIds = [];
						$(this.parentProperties).each(function(){
							parentIds.push($.youi.fieldUtils.getFieldId(this));
						});
						//_log.info('parentIds:'+parentIds);
						this.parentIds = parentIds;
					}
					//处理模型
					fields.push($.extend({
						id	  :fieldId,
						type  :'fieldText',
						column:1,
						nextField:nextField,
						prevField:prevField,
						prefix   :prefix
					},this));
				});
				this.fields = fields;
			},
			
			/**
			 * 初始化fields
			 */
			_initFields:function(){
				var fields = this.fields;
				this.element.find('.youi-field').each(function(index){
					var id		  = this.getAttribute('id'),
						fieldModel	  = _getFieldModel(fields,id);
					
					if(fieldModel&&$.youi[fieldModel.type]){//$(this)[fieldModel.type]
						//初始化field组件
						$(this)[fieldModel.type](fieldModel);
					}
				});
				
				
			},
			
			_initAction:function(){
				this._on({
					'validate .youi-field':function(event,ui){
						//表单校验
					},
					
					'value .youi-field':function(event,ui){
						
					}
				});
			},
			
			/**
			 * 获得键值对
			 */
			getFieldValues:function(){
				var fieldValues = [];
				var fields = this.fields;
				this.element.find('.youi-field').each(function(index){
					var id = this.getAttribute('id'),
						fieldModel = _getFieldModel(fields,id),
						value;
						//fieldCustom
					if($(this).hasClass('fieldCustom')){//自定义field
						fieldModel = {
							property:this.getAttribute('property')||$(this).data('property')
						};
					}
					if(fieldModel){
						value = $(this).fieldValue();
						property = fieldModel.property;
						if(typeof(value)=='string'){
							fieldValues.push({
								property:property,
								value:value
							});
						}else if(value&&value.length){
							$(value).each(function(){
								fieldValues.push({
									property:property,
									value:this
								});
							});
						}
					}
				});
				return fieldValues;
			}
		}));
		
		function _getFieldModel(fields,fieldId){
			for(var i=0;i<fields.length;i++){
				if(fields[i].id==fieldId){
					return fields[i];
				}
			}
			return null;
		}
		
	})(jQuery);

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	(function($) {
		
		$.youi.fieldUtils = {
			/**
			 * 从dom元素中读取field实例
			 * @param fieldElement field对应的dom元素
			 */
			getInstance:function(fieldElement){
				var element = $(fieldElement);
				if(element&&element.is('.youi-field')){
					var instance = $.data(element[0], 'youi-'+element.data('fieldType'));
					return instance;
				}
				return null;
			},
			
			/**
			 * 得到field的id
			 */
			getFieldId:function(property,prefix){
				if(!property)return null;
				prefix = prefix?prefix:'field';
				var id = prefix+'_'+property.replace(/\./g,'_');
				return id;
			},
			
			validateMethod:{
				// http://jqueryvalidation.org/email-method/
				email: function( value, element ) {
					// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
					// Retrieved 2014-01-14
					// If you have a problem with this implementation, report a bug against the above spec
					// Or use custom methods to implement your own email validation
					return /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
				},

				// http://jqueryvalidation.org/url-method/
				url: function( value, element ) {

					// Copyright (c) 2010-2013 Diego Perini, MIT licensed
					// https://gist.github.com/dperini/729294
					// see also https://mathiasbynens.be/demo/url-regex
					// modified to allow protocol-relative URLs
					return /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test( value );
				},

				// http://jqueryvalidation.org/date-method/
				date: function( value, element ) {
					return !/Invalid|NaN/.test( new Date( value ).toString() );
				},

				// http://jqueryvalidation.org/dateISO-method/
				dateISO: function( value, element ) {
					return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
				},

				// http://jqueryvalidation.org/number-method/
				number: function( value, element ) {
					return /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
				},

				// http://jqueryvalidation.org/digits-method/
				digits: function( value, element ) {
					return /^\d+$/.test( value );
				},
				
				phone:function(value,element){
					// accept only digits and dashes
					if ( /[^0-9\-]+/.test( value ) ) {
						return false;
					}
				},

				// http://jqueryvalidation.org/creditcard-method/
				// based on http://en.wikipedia.org/wiki/Luhn_algorithm
				creditcard: function( value, element ) {
					if ( this.optional( element ) ) {
						return "dependency-mismatch";
					}
					// accept only spaces, digits and dashes
					if ( /[^0-9 \-]+/.test( value ) ) {
						return false;
					}
					var nCheck = 0,
						nDigit = 0,
						bEven = false,
						n, cDigit;

					value = value.replace( /\D/g, "" );

					// Basing min and max length on
					// http://developer.ean.com/general_info/Valid_Credit_Card_Types
					if ( value.length < 13 || value.length > 19 ) {
						return false;
					}

					for ( n = value.length - 1; n >= 0; n--) {
						cDigit = value.charAt( n );
						nDigit = parseInt( cDigit, 10 );
						if ( bEven ) {
							if ( ( nDigit *= 2 ) > 9 ) {
								nDigit -= 9;
							}
						}
						nCheck += nDigit;
						bEven = !bEven;
					}

					return ( nCheck % 10 ) === 0;
				},

				// http://jqueryvalidation.org/minlength-method/
				minlength: function( value, element, param ) {
					var length = $.isArray( value ) ? value.length : _getLength( value, element );
					return length >= param;
				},

				// http://jqueryvalidation.org/maxlength-method/
				maxlength: function( value, element, param ) {
					var length = $.isArray( value ) ? value.length : _getLength( value, element );
					return length <= param;
				},

				// http://jqueryvalidation.org/rangelength-method/
				rangelength: function( value, element, param ) {
					var length = $.isArray( value ) ? value.length : _getLength( value, element );
					return ( length >= param[ 0 ] && length <= param[ 1 ] );
				},

				// http://jqueryvalidation.org/min-method/
				min: function( value, element, param ) {
					return value >= param;
				},

				// http://jqueryvalidation.org/max-method/
				max: function( value, element, param ) {
					return value <= param;
				},

				// http://jqueryvalidation.org/range-method/
				range: function( value, element, param ) {
					return ( value >= param[ 0 ] && value <= param[ 1 ] );
				},

				// http://jqueryvalidation.org/equalTo-method/
				equalTo: function( value, element, param ) {
					// bind to the blur event of the target in order to revalidate whenever the target field is updated
					// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
					var target = $( param );
					if ( this.settings.onfocusout ) {
						target.off( ".validate-equalTo" ).on( "blur.validate-equalTo", function() {
							$( element ).valid();
						});
					}
					return value === target.val();
				}
			}
		};
		
		$.extend(jQuery.fn, {
			fieldValue:function(value,text){
				var instance = $.youi.fieldUtils.getInstance(this);
				if(instance){
					if(arguments.length==0){
						return instance.getValue();
					}else{
						instance.setValue(value,text);
					}
				}
				return null;
			},
			
			fieldDefaultValue:function(value){
				var instance = $.youi.fieldUtils.getInstance(this);
				if(instance&&value){
					instance.options.defaultValue = value;
				}
			},
			
			fieldShow:function(){
				var instance = $.youi.fieldUtils.getInstance(this);
				if(instance){
					return instance.getText()||instance.getValue();
				}
				return null;
			},
			
			fieldReset:function(escapeEnable){
				this.each(function(){
					var instance = $.youi.fieldUtils.getInstance(this);
					if(instance){
						if(escapeEnable==true&&instance.options.escapeReset==true){
							return;
						}
						instance.reset&&instance.reset();
					}
				});
			},
			
			fieldFocus:function(){
				var instance = $.youi.fieldUtils.getInstance(this);
				if(instance){
					instance.focus();
				}
			},
			
			fieldValidate:function(){
				this.each(function(){
					var instance = $.youi.fieldUtils.getInstance(this);
					instance&&instance.validate&&instance.validate();
				});
			},
			
			fieldClear:function(){
				this.each(function(){
					var instance = $.youi.fieldUtils.getInstance(this);
					instance&&instance.clear();
				});
			},
			
			fieldWidth:function(width){
				var instance = $.youi.fieldUtils.getInstance(this);
				if(instance){
					if(arguments.length==0){
						return instance.getWidth();
					}else{
						instance.setWidth(width);
					}
				}
				return null;
			},
			
			fieldDisabled:function(){
				this.each(function(){
					var instance = $.youi.fieldUtils.getInstance(this);
					instance&&instance.disabled();
				});
			},
			
			fieldEnable:function(){
				this.each(function(){
					var instance = $.youi.fieldUtils.getInstance(this);
					instance&&instance.enable();
				});
			},
			
			fieldNotNull:function(isNotNull){
				this.each(function(){
					var instance = $.youi.fieldUtils.getInstance(this);
					instance&&instance.setNotNull(isNotNull);
				});
			}
		});
		
		/**
		 * 
		 */
		$.youi.field = {
			_initWidget:function(){
				//id处理
				this.options.id = this.options.id||$.youi.fieldUtils.getFieldId(this.options.property,this.options.prefix);
				//设置特殊的记录通用信息的属性
				this.element.data('fieldType',this.widgetName)
							.data('property',this.options.property);
				
				this._initField();
				
				if(this.options.defaultValue){
					this.options.defaultValue = decodeURIComponent(this.options.defaultValue);
					this.orgValue = this.options.defaultValue;
					this.setValue(this.options.defaultValue);
				}
				
			},
			
			_initField:function(){
				
			},
			
			_initAction:function(){
				this._on({
					'change input.textInput':function(event){
						//
						this._doChange();
					}
				});
			},
			
			_doChange:function(){
				this.validate();//执行校验
				if(this.element.hasClass('validate-error')){
					return;
				}
				//triggerChange
				
				var value = this.getValue();
				
				if($.isFunction(this.options.change)){
					this._trigger('change',this.options.change,{property:this.options.property,value:value});
				}else{
					this._callGloablFunc('change',value);
				}
				
				//触发resetChildren事件
				this.element.trigger('resetChildren',{value:value});
			},
			/**
			 * 非空校验
			 */
			_validateNotNull:function(value){
				if(this.options.notNull==null)return true;
				if(this.options.notNull==true){
					if($.isArray(value)&&value.length==0){//数组类型
						this._validateError('不能为空');
						return false;
					}
					
					if(typeof(value)=='string'&&(value==''||value==null)){
						this._validateError('不能为空');
						return false;
					}
				}
				return true;
			},
			
			/**
			 * 校验通过
			 */
			_validateSuccess:function(msg){
				this.element
					.removeClass('validate-error')
					.addClass('validate-success').removeAttr('title');
			},
			/**
			 * 校验未通过
			 */
			_validateError:function(msg){
				msg = msg||'';
				this.element
					.removeClass('validate-success')
					.addClass('validate-error').attr('title','【'+(this.options.caption||this.options.property)+'】'+msg);
				
			},
			/**
			 * 获得组件值
			 */
			getValue:function(){
				//abstract method
			},
			/**
			 * 设置组件值
			 */
			setValue:function(value){
				//abstract method
			},
			/**
			 * 获得文本
			 */
			getText:function(){
				//abstract method
			},
			/**
			 * 设置文本
			 */
			setText:function(text){
				//abstract method
			},
			/**
			 * 清除
			 */
			clear:function(){
				//abstract method
			},
			/**
			 * 聚焦
			 */
			focus:function(){
				//abstract method
			},
			/**
			 * 校验
			 */
			validate:function(){
	//			if(this.element.hasClass('validate-error')){
	//				this.element.tooltip('destroy');
	//			}
				this.element.removeClass('validate-success').removeClass('validate-error').removeAttr('title');
				var value = this.getValue();
				this._validateNotNull(value);
				this._doFieldValidate(value);
			},
			
			_doFieldValidate:function(){
				
			},
			
			reset:function(){
	//			if(this.element.hasClass('validate-error')){
	//				this.element.tooltip('destroy');
	//			}
				this.element.removeClass('validate-success').removeClass('validate-error').removeAttr('title');
				
				if(this.options.defaultValue!=null){
					this.setValue(this.options.defaultValue,this.options.defaultShow);
					//值变化
					this._doChange('', this.options.defaultValue);
				}else{
					this.clear();
				}
			},
			
			setWidth:function(width){
				this.element.width(width);
				this.element.find('>table').width(width);
				var inputWidth = width - 22;//validate width
				var iconElement = $('.select-down:first',this.element);
				inputWidth = inputWidth - (iconElement.length==0?6:20);
				this.element.find('.textInput,field-input,field-input-full').width(inputWidth);
			},
			
			disabled:function(){
				this.element.addClass('disabled').find('.textInput').attr('disabled','disabled');
			},
			
			enable:function(){
				this.element.removeClass('disabled').find('.textInput').removeAttr('disabled','disabled');
			},
			
			setNotNull:function(isNotNull){
				var fieldGroup = this.element.parents('.field-group:first');
				if(isNotNull==true){
					fieldGroup.addClass('notNull');
				}else{
					fieldGroup.removeClass('notNull');
				}
			},
			/**
			 * 销毁组件
			 */
			destory:function(){
				this.element.removeClass('youi-field')
					.removeAttr('fieldType').removeAttr('property');
				$.Widget.prototype.destroy.apply(this, arguments);
			}
		};
		
		
		$.youi.fieldInputValidate = {
			
			_doFieldValidate:function(value){
				
				console.log('validate:'+this.options.id+' : '+value);
				var params = this._getValidateParams(),
					errorMessage;
				//调用全局的校验函数
				var validateResult = this._callGloablFunc('validate',params);
				
				if(validateResult&&validateResult.errorMessage){
					errorMessage = validateResult.errorMessage;
				}else if(this.options.dataType&&$.isFunction($.youi.fieldUtils.validateMethod[this.options.dataType])){//数据类型
					if($.youi.fieldUtils.validateMethod[this.options.dataType].apply(this.element,[value,this.element[0],params[this.options.dataType]])===false){
						errorMessage = $.youi.resourceUtils.get('field.'+this.options.dataType,params);
					}
				}
				
				if(errorMessage){
					this._validateError(errorMessage);
				}
			},
			
			_getValidateParams:function(){
				return {};
			}
		};
		
		/**
		 * 外部读取数据,数据联动
		 */
		$.youi.fieldSource =  {
			
			_initSource:function(){
				this.dropMenu = $('.dropdown-menu',this.element);
				
				if(this.options.parents&&typeof(this.options.parents)==='string'){
					this.options.parents = this.options.parents.split(',');
				}
				//
				this._bindParentFields();//绑定父field
			},
			
			_bindParentFields:function(){
				var that = this;
				this._parentFieldsVisit(function(){
					$(this).bind('resetChildren',function(){
						that._resetByParent();
					});
				});
			},
			/**
			 * 父节点值变化调用
			 */
			_resetByParent:function(){
				this.dropMenu.removeClass('loaded');
				this.clear();
				if(this.options.expression){
					//计算值
					try{
						var expression = $.youi.recordUtils.replaceByRecord(this.options.expression,this._getParentRecord());
						expression = expression.replace(new RegExp("\\{\\w*\\}", "g"), "");
						console.log(expression);
						var value = eval(expression);
						if($.youi.stringUtils.notEmpty(value)){
							this.setValue(value);
						}
					}catch(err){
						console.log(err);
					}
				}
				//触发多级联动
				this.element.trigger('resetChildren');
			},
			
			_bindDropdownAction:function(){
				var that = this;
				this.element.bind('show.bs.dropdown',function(event){
					var elem = $(event.target);
					var loaded = $('.dropdown-menu',elem).width(elem.width()-2).hasClass('loaded');//
					
					if(!loaded){
						that._loadSrc();//ajax加载数据
					}
				});
			},
			
			/**
			 * ajax加载数据
			 */
			_loadSrc:function(){
				if(this.options.src&&this.dropMenu.length){
					var that = this;
					this.dropMenu.empty();
					
					//field-submit-block
					var params = [];
					
					params = params.concat(this._getParentParams());
					//ajax读取数据
					$.youi.ajaxUtils.ajax({
						url:this.options.src,
						data:params.join('&'),
						success:function(result){
							if(result&&result.records){
								that._parseItems(result.records);
							}
						}
					});
				}else if(this.options.convert&&this.dropMenu.length){//convert
					this._parseItems(this._convert2Records());
				}
			},
			
			_convert2Records:function(){
				var converts = $.youi.serverConfig.convertArray[this.options.convert];
				if(!converts)return;
				
				var records = [];
				this.options.code = 'code';
				this.options.show = 'show';
				
				for(var code in converts){
					records.push({
						'code':code,
						'show':converts[code]
					});
				}
				
				return records;
			},
			
			/**
			 * 获取父field参数
			 */
			_getParentParams:function(){
				return $.youi.parameterUtils.toParams($.youi.recordUtils.recordToParameters(this._getParentRecord()));
			},
			
			_getParentRecord:function(){
				var parentRecord = {};
				
				this._parentFieldsVisit(function(){
					var fieldElem = $(this);
					parentRecord[fieldElem.data('property')] = fieldElem.fieldValue();
				});
				return parentRecord;
			},
			/**
			 * 遍历父field
			 */
			_parentFieldsVisit:function(callback){
				if(this.options.parents){
					var fieldBlockContianer =  this.element.parents('.field-block-container:first');
					if(fieldBlockContianer.length){
						var parentProperties = this.options.parents;
						var parentRecord = {};
						var selector = '.youi-field[data-property="'+parentProperties.join('"],.youi-field[data-property="')+'"]';
						
						$(selector,fieldBlockContianer).each(function(){
							//取值
							if($.isFunction(callback)){
								callback.apply(this);
							}
						});
					}
				}
			},
			
			/**
			 * 数据解析
			 */
			_parseItems:function(items){
				//
				var selectedValues = this.getValue();
				
				if(typeof(selectedValues)==='string'){
					selectedValues = [selectedValues];
				}
				
				var htmls = [],
					texts = [];//
				
				if(this.options.notNull!=true){
					htmls.push(this._buildEmptyItemHtml());
				}
				
				for(var i=0;i<items.length;i++){
					if($.inArray(items[i][this.options.code],selectedValues)!=-1){
						texts.push(items[i][this.options.show]);
					}
					htmls.push(this._buildItemHtml(items[i],selectedValues));
				}
				this.dropMenu.html(htmls.join(''));
				this.dropMenu.addClass('loaded');
				
				
				if(texts.length){
					this._setText(texts.join(','));
				}else{
					this.clear();
				}
			},
			
			_setText:function(text){
				this.element.find('.textInput').text(text||'');
			},
			/**
			 * 空记录
			 */
			_buildEmptyItemHtml:function(){
				if(this.options.multiple==true){
					return '<div class="select-all"><span class="youi-icon icon-item"></span>全选</div>';
				}
				
				var emptyItem = {};
				emptyItem[this.options.show] = this.options.emptyItemCaption||'';
				emptyItem[this.options.code] = '';
				return this._buildItemHtml(emptyItem,[]);
			},
			
			_buildItemHtml:function(item,selectedValues){
				return '';
			}
			
		};
		
		$.widget("youi.fieldCustom",$.extend({},$.youi.field,{
			_initField:function(){
				
			},
			
			setValue:function(value){
				this.options.setValue(value);
			},
			
			getValue:function(){
				return this.options.getValue(value);
			},
			
			clear:function(){
				this.options.clear(value);
			}
		}));
		
		/**
		 * 获取字符长度
		 * @param value
		 * @param element
		 * @returns
		 */
		function _getLength(value,element){
			return value.length;
		}
		
		
		
		
	})(jQuery);

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-8
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldAutocomplete",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			/**
			 * 
			 */
			_initField:function(){
				var self = this;
				this.options.propValueProperty = this.options.propValueProperty||this.options.code;
				this._initSource();//
				
				this.element.find('input.textInput').autocomplete({
					source:function( request, response ) {
						if ( this.xhr ) {
							this.xhr.abort();
						}
						var that = this;
						this.xhr = $.youi.ajaxUtils.ajax({
							url: self.options.src,
							data: request,
							success: function( results ) {
								var items = [];
								if($.isArray(results)){
									items = results;
								}else if(results&&results.record&&results.record.items){
									items = results.record.items;
								}
								
								response( _dataParser(items,self.options) );
							},
							error: function() {
								response([]);
							}
						});
					},
					code:this.options.show,
					term:this.options.property,
					response:function(event,ui){
						this.selectedItem = null;
						$(event.target).next().val('');
					},
					select: function( event, ui ) {
						//self.element.trigger('selectvalue',ui.item);
						this.selectedItem = ui.item;
					},search: function(event, ui) {
						
					},dataParser:function(results){
						return _dataParser(results,self.options);
					},
					open:function(event,ui){
						
					},
					close: function(event, ui) {
						
						if(this.selectedItem){
							//设置值
							var value = this.selectedItem.propertyValue||this.selectedItem.value;
							self.setValue(value,this.selectedItem.value);
							
							$(event.target).attr('title',this.selectedItem.label);
							self._doChange(value);
						}else{
							$(event.target).val('').attr('title','');
						}
						this.selectedItem = null;
						
					},change:function(event,ui){
						
					},focus:function(event,ui){
						if(ui.item){
							//设置值
							var value = ui.item.propertyValue||ui.item.value;
							self.setValue(value,ui.item.value);
							this.selectedItem = ui.item;
						}
					},messages: {
						noResults: '',
						results: function( amount ) {
							return '';
						}
					}
				});
			},
			
			_fieldHtmls:function(){
				var htmls = [];
				var inputWidth = this.options.width - 17;
				htmls.push("<input style=\"width:"+(inputWidth)+"px;\" type=\"text\" class=\"textInput\"></input>");
				htmls.push("<input type=\"hidden\" class=\"value\"></input>");
				htmls.push("<div class=\"field-invalid\"></div>");
				return htmls.join('');
			},
			
			setValue:function(value,show){
				var text = show||value;
				if(this.options.convert&&$.youi.serverConfig.convertArray[this.options.convert]){
					text = $.youi.serverConfig.convertArray[this.options.convert][value];
				}
				this.element.find('input.textInput').val(text);
				this.element.find('input.value').val(value);
				
				//this._resetChildren();
			},
			
			/**
			 * 联动子field
			 */
			_reloadByParent:function(){
				this.clear();
				//this._disposeLoaded();
				//联动处理子节点
				//this._resetChildren();
			},
			
			getValue:function(){
				//没有显示值时，直接返回空。
				var inputValue = this.element.find('input.textInput').val();
				if(!inputValue||inputValue==''){
					return '';
				}
				return this.element.find('input.value').val();
			},
			
			clear:function(){
				this.element.removeClass('validate-success').removeClass('validate-error').removeAttr('title');
				this.element.find('input.value,input.textInput').val('');
				
				this._doChange('','');
			},
			
			_initAction:function(){
				
			}
		}));
		
		function _dataParser(results,options){
			var code = options.code,
				show = options.show,
				mixed = options.mixed;
			if(results&&results.records){
				var items = [];
				$(results.records).each(function(){
					items.push($.extend({},this,{
						value:this[show]||'',//特别说明,value为实际的show属性
						label:this[show]||''
					}));
				});
				return items;
			}else{
				return results;
			}
		}
	})(jQuery);

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(6);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldCalendar",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			options:{
				textFormat:'yyyy-MM-dd',
				format:'yyyy-MM-dd'
			},
			
			_initField:function(){
				var that = this;
				this._initSource();//初始化
				this.element.find('.dropdown-menu:first').datepicker({
					onSelect:function(event,ui){
						that._setValueByDatepicker(ui.selectDate);
						$(this).dropdown('toggle');
					},onToday:function(event,ui){
						that._setValueByDatepicker(ui.selectDate);
					},onClear:function(event,ui){
						that.clear();
					}
				}).addClass('loaded');
			},
			
			_initAction:function(){
				var that = this;
				//
				this._on({
					
				});
				//
				this._bindDropdownAction();
			},
			
			_setValueByDatepicker:function(date){
				this.setValue($.youi.dateUtils.dateToStr(date, this.options.format), $.youi.dateUtils.dateToStr(date, this.options.textFormat));
			},
			
			setValue:function(value,show){
				var date = $.youi.dateUtils.strToDate(value,this.options.format);
				show = show||$.youi.dateUtils.dateToStr(date, this.options.textFormat);
				this.element.find('.textInput').text(show||value);
				this.element.find('.value').val(value);
			},
			
			getValue:function(){
				var value = this.element.find('.value').val();
				if(this.options.multiple==true){
					value = value.split(',');
				}
				return value;
			},
			
			clear:function(){
				this.element.find('.textInput').text('');
				this.element.find('.value').val('');
			}
		}));
	})(jQuery);

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldCheckboxGroup",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			/**
			 * field组件初始化入口
			 */
			_initField:function(){
				this._initSource();//初始化
				console.log('init checkbox');
				
				this.dropMenu = this.element.find('.content:first');
				//加载数据
				this._loadSrc();
			},
			/**
			 * 加载数据的单条记录解析成html
			 */
			_buildItemHtml:function(item,selectedValues){
				return '<span data-value="'+item.code+'" class="option-item youi-icon icon-check-empty">'+item.show+'</span> ';
			},
			
			_buildEmptyItemHtml:function(){
				return '';
			},
			/**
			 * 事件
			 */
			_initAction:function(){
				//
				this._on({
					'click .option-item':function(event){
						var item = $(event.currentTarget);
						if(item.hasClass('icon-check-empty')){
							item.removeClass('icon-check-empty').addClass('icon-check');
						}else{
							item.removeClass('icon-check').addClass('icon-check-empty');
						}
						
						this.validate();
					}
				});
			},
			
			setValue:function(value,show){
				
			},
			
			getValue:function(){
				var values = [];
				
				this.element.find('.option-item.icon-check').each(function(){
					values.push($(this).data('value'));
				});
				
				return values;
			},
			
			clear:function(){
				this.element.find('.option-item.icon-check').removeClass('icon-check').addClass('icon-check-empty');
			}
		}));
	})(jQuery);

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 自定义的field
	 */

	/**
	 * field组件
	 * Copyright (c) 2009 zhouyi
	 * licenses
	 * doc 
	 */
	__webpack_require__(16);
	(function($) {
		var _log = $.youi.log;
		/**
		 * fieldLabel组件
		 * 
		 */
		
		$.widget("youi.fieldCustom",$.youi.abstractWidget,$.extend({},$.youi.field,{
			
			options:{
				
			},
			
			_initField:function(){
				if(this.isCustom()){
					var options = $.extend({},
							this.options,
							this.options.customOptions,
							{initHtml:true});
					this.element[this.options.custom](options);
				}else{
					this.element.addClass('youi-field');
					$.extend(this,{
						getValue:this.options.getValue,
						setValue:this.options.setValue,
						clear:this.options.clear
					});
				}
			},
			
			isCustom:function(){
				return this.options.custom&&this.element[this.options.custom];
			}
		}));
	})(jQuery);

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * field组件
	 * Copyright (c) 2009 zhouyi
	 * licenses
	 * doc 
	 */
	__webpack_require__(16);
	(function($) {
		var _log = $.youi.log;
		/**
		 * fieldArea
		 * 
		 */
		$.widget("youi.fieldFile",$.youi.abstractWidget,$.extend({},$.youi.field,{
			_initField:function(){
				
			},
			
			_fieldHtmls:function(){
				var htmls = [];
				
				return htmls.join('');
			},
			
			setValue:function(value){
				
			},
			
			getValue:function(){
				return '';
			},
			
			clear:function(){
				this.element.removeClass('validate-success').removeClass('validate-error').removeAttr('title');
				this.element.find('.value').val('');
			}
			
		}));
		
	})(jQuery);

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldHidden",$.youi.abstractWidget,$.extend({},$.youi.field,{
			/**
			 * 
			 */
			_initField:function(){
				
			},
			
			setValue:function(value,show){
				this.element.find('input.value').val(value);
			},
			
			getValue:function(){
				return this.element.find('.value').val();
			},
			
			clear:function(){
				this.element.find('.value').val('');
			}
		}));
	})(jQuery);

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldLabel",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			/**
			 * 
			 */
			_initField:function(){
				this._initSource();//初始化
			},
			/**
			 * 
			 */
			_initAction:function(){
				//
			},
			
			_defaultHtmls:function(){
				this.element.addClass('fieldLabel').html('<span class=\"textShow form-control youi-bgcolor\" onclick=\"return false;\" href=\"#\"></span><input name=\""+'+this.options.property+'+"\" type=\"hidden\" class=\"value\"></input>');
			},
			
			setValue:function(value,show){
				if(this.options.convert&&$.youi.serverConfig.convertArray[this.options.convert]){
					show = $.youi.serverConfig.convertArray[this.options.convert][value];
					if(this.options.mixed){
						show = value+' - '+show;
					}
				}
				
				var textShow = show||'';
				
				if(this.options.format=='image'){
					textShow = '<img height="'+(this.element.height()-20)+'px" src="'+value+'"></img>';
				}if(this.options.format=='file'){
					var href = $.youi.serverConfig.contextPath+'upload/download/'+value+'.html';
					textShow = '<a class="page-link" href="'+href+'">'+value+'</a>';
				}else if(this.options.format&&this.options.textFormat){
					try{
						var date = $.youi.dateUtils.strToDate(value,this.options.format);
						if(date){
							textShow =  $.youi.dateUtils.dateToStr(date,this.options.textFormat);
						}
					}catch(err){
						
					}
				}
				
				this.element.find('.textShow').html(textShow||value);
				this.element.find('input.value').val(value);
			},
			
			getValue:function(){
				return this.element.find('.value').val();
			},
			
			clear:function(){
				this.element.find('.textShow').text('');
				this.element.find('.value').val('');
			}
		}));
	})(jQuery);

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldList",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			/**
			 * 
			 */
			_initField:function(){
				this._initSource();//初始化
				this.dropMenu = this.element;
				this._loadSrc();//
			},
			/**
			 * 
			 */
			_initAction:function(){
				//
				this._on({
					
					'click .option-item':function(event){
						this._selectedItem($(event.currentTarget));
					}
				});
			},
			
			_selectedItem:function(item){
				this.element.find('.option-item').not(item).removeClass('selected');
				item.addClass('selected');
				
				this._doChange();
			},
			
			
			_defaultHtmls:function(){
			},
			/**
			 * 
			 */
			_buildItemHtml:function(item,selectedValues){
				var show = item[this.options.show],
					value = item[this.options.code];
			
				return '<div data-value="'+value+'" class="option-item pull-left">'+show+'</div>';
			},
			
			_buildEmptyItemHtml:function(){
				return '';
			},
			
			setValue:function(value,show){
				this.element.find('.option-item.selected').removeClass('selected');
				this.element.find('.option-item[data-value='+value+']').addClass('selected');
			},
			
			getValue:function(){
				var value = this.element.find('.option-item.selected:first').data('value');
				return value;
			},
			
			clear:function(){
				this.element.find('.option-item.selected').removeClass('selected');
			}
		}));
	})(jQuery);

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldPassword",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldInputValidate,{
			
			getValue:function(){
				return this.element.find('.value').val();
			},
			
			setValue:function(val){
				return this.element.find('.value').val(val);
			},
			
			clear:function(){
				this.element.find('.textInput.value').val('');
			}
		}));
		
		
	})(jQuery);

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldRadioGroup",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			/**
			 * field组件初始化入口
			 */
			_initField:function(){
				this._initSource();//初始化
				
				this.dropMenu = this.element.find('.content:first');
				//加载数据
				this._loadSrc();
			},
			/**
			 * 加载数据的单条记录解析成html
			 */
			_buildItemHtml:function(item,selectedValues){
				return '<span data-value="'+item.code+'" class="option-item youi-icon icon-circle-blank">'+item.show+'</span> ';
			},
			
			_buildEmptyItemHtml:function(){
				return '';
			},
			/**
			 * 事件
			 */
			_initAction:function(){
				//
				this._on({
					'click .option-item':function(event){
						var item = $(event.currentTarget);
						if(item.hasClass('icon-circle-blank')){
							this.element.find('.icon-ok-circle').removeClass('icon-ok-circle').addClass('icon-circle-blank');
							item.addClass('icon-ok-circle').removeClass('icon-circle-blank');
							this.validate();
							//
							this._doChange();
						}
					}
				});
			},
			
			setValue:function(value,show){
				this.element.find('.option-item[data-value='+value+']').addClass('icon-ok-circle').removeClass('icon-circle-blank');
			},
			
			getValue:function(){
				return this.element.find('.option-item.icon-ok-circle').data('value');
			},
			
			clear:function(){
				this.element.find('.option-item.icon-ok-circle').removeClass('icon-ok-circle').addClass('icon-circle-blank');
			}
		}));
	})(jQuery);

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldSelect",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			
			_initField:function(){
				if(this.options.multiple===true){
					this.element.addClass('multiple');
				}
				
				this._initSource();//初始化
			},
			
			_defaultHtmls:function(){
				var htmls = [];
				htmls.push("<span class=\"form-control textInput\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"/>");
				htmls.push("<input type=\"hidden\" class=\"value\" name=\""+this.options.property+"\"/>");
				htmls.push("<div class=\"input-group-addon\" data-toggle=\"dropdown\" >");
				htmls.push("	<span class=\"caret\"></span>");
				htmls.push("</div><ul class=\"dropdown-menu\"></ul>");
				
				
				this.element.addClass('dropdown input-group').html(htmls.join(''));
			},
			
			_initAction:function(){
				var that = this;
				//
				this._on({
					'click .dropdown-menu>li':function(event){
						this._selectedItem($(event.currentTarget));
						if(this.options.multiple==true){
							return false;
						}
					},
					'click .dropdown-handler':function(event){
						
					},
					'click .select-all':function(event){
						if(this.options.multiple==true){
							var selectAllElement = $(event.currentTarget);
							
							if(selectAllElement.hasClass('selected')){
								this.element.find('.option-item.selected').removeClass('selected');
							}else{
								this.element.find('.option-item').addClass('selected');
							}
							
							this._selectedItem(selectAllElement);
							return false;
						}
					}
				});
				
				//
				this._bindDropdownAction();
			},
			
			_buildItemHtml:function(item,selectedValues){
				var show = item[this.options.show],
					value = item[this.options.code];
				
				if(typeof(selectedValues)=='string'){
					selectedValues = [selectedValues];
				}
				
				var selectedStyle = '';
				if($.inArray(selectedValues,value)!=-1){
					selectedStyle= ' selected';
				}
				
				return '<li class="option-item'+selectedStyle+'" data-value="'+value+'"><span class="youi-icon icon-item">'+show+'</span></li>';
			},
			/**
			 * 选择元素
			 */
			_selectedItem:function(itemElem){
				var value,show;
				
				if(this.options.multiple==true){
					itemElem.toggleClass('selected');
					var values = [];
					var shows = [];
					this.element.find('.option-item.selected').each(function(){
						var item = $(this);
						var value = item.data('value');
						if($.youi.stringUtils.notEmpty(value)){
							values.push(item.data('value'));
							shows.push(item.text());
						}
					});
					
					value = values.join();
					show = shows.join();
					
				}else{
					if(!itemElem.hasClass('selected')){
						value = itemElem.data('value');
						show = itemElem.text();
						
						//修改选择行样式为selected
						this.element.find('.option-item').not(itemElem).removeClass('selected');
						itemElem.addClass('selected');
					}
				}
				
				if(value!=null){
					this.setValue(value, show);
					this._doChange();
				}
				
			},
			
			setValue:function(value,show){
				this.element.find('.textInput').text(show||value);
				this.element.find('.value').val(value);
				
				var dropdownElem = this.element.find('.dropdown-menu');
				
				if(!show&&!dropdownElem.hasClass('loaded')){
					//没有文本参数时，自动展开数据
					this.element.find('.textInput').dropdown('toggle').dropdown('toggle');
				}
				
			},
			
			getValue:function(){
				var value = this.element.find('.value').val();
				if(this.options.multiple==true){
					value = value.split(',');
				}
				return value;
			},
			
			clear:function(){
				this.element.find('.textInput').text('');
				this.element.find('.value').val('');
			}
		}));
	})(jQuery);

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2015, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2015-7-2
	 */

	__webpack_require__(16);
	(function($) {
		var _log = $.youi.log;
		/**
		 * fieldSpinner组件
		 * 
		 */
		$.widget("youi.fieldSpinner",$.youi.abstractWidget,$.extend({},$.youi.field,{
			
			/**
			 * 参数配置
			 */
			options:{
				culture: null,
				incremental: true,
				max: null,
				min: null,
				numberFormat: null,
				page: 10,
				step: 1,

				change: null,
				spin: null,
				start: null,
				stop: null
			},
			
			_initField:function(){
				
				this._setOption( "max", this.options.max );
				this._setOption( "min", this.options.min );
				this._setOption( "step", this.options.step );
				
				this.inputElement = this.element.find('input.value:first');
				
				this._on(this.inputElement,this._inputEvents);
				//
				this._on(this._events);
				
				// turning off autocomplete prevents the browser from remembering the
				// value when navigating through history, so we re-enable autocomplete
				// if the page is unloaded before the widget is destroyed. #7790
				this._on( this.window, {
					beforeunload: function() {
						this.inputElement.removeAttr( "autocomplete" );
					}
				});
			},
			
			_inputEvents: {
				keydown: function( event ) {
					if ( this._start( event ) && this._keydown( event ) ) {
						event.preventDefault();
					}
				},
				keyup: "_stop",
				focus: function() {
					this.previous = this.inputElement.val();
				},
				blur: function( event ) {
					if ( this.cancelBlur ) {
						delete this.cancelBlur;
						return;
					}

					this._stop();
					this._refresh();
					if ( this.previous !== this.inputElement.val() ) {
						this._trigger( "change", event );
					}
				}
			},
			
			_keydown: function( event ) {
				var options = this.options,
					keyCode = $.ui.keyCode;

				switch ( event.keyCode ) {
				case keyCode.UP:
					this._repeat( null, 1, event );
					return true;
				case keyCode.DOWN:
					this._repeat( null, -1, event );
					return true;
				case keyCode.PAGE_UP:
					this._repeat( null, options.page, event );
					return true;
				case keyCode.PAGE_DOWN:
					this._repeat( null, -options.page, event );
					return true;
				}

				return false;
			},
			
			_events:{
				
				'mousewheel input.value': function( event, delta ) {
					if ( !delta ) {
						return;
					}
					if ( !this.spinning && !this._start( event ) ) {
						return false;
					}

					this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
					clearTimeout( this.mousewheelTimer );
					this.mousewheelTimer = this._delay(function() {
						if ( this.spinning ) {
							this._stop( event );
						}
					}, 100 );
					event.preventDefault();
				},
				//按钮动作
				'mousedown .spinner-handler':function(event){
					var previous;

					// We never want the buttons to have focus; whenever the user is
					// interacting with the spinner, the focus should be on the input.
					// If the input is focused then this.previous is properly set from
					// when the input first received focus. If the input is not focused
					// then we need to set this.previous based on the value before spinning.
					previous = this.inputElement[0] === this.document[0].activeElement ?
						this.previous : this.inputElement.val();
					function checkFocus() {
						var isActive = this.inputElement[0] === this.document[0].activeElement;
						if ( !isActive ) {
							this.inputElement.focus();
							this.previous = previous;
							// support: IE
							// IE sets focus asynchronously, so we need to check if focus
							// moved off of the input because the user clicked on the button.
							this._delay(function() {
								this.previous = previous;
							});
						}
					}

					// ensure focus is on (or stays on) the text field
					event.preventDefault();
					checkFocus.call( this );

					// support: IE
					// IE doesn't prevent moving focus even with event.preventDefault()
					// so we set a flag to know when we should ignore the blur event
					// and check (again) if focus moved off of the input.
					this.cancelBlur = true;
					this._delay(function() {
						delete this.cancelBlur;
						checkFocus.call( this );
					});

					if ( this._start( event ) === false ) {
						return;
					}
					
					this._repeat( null, $( event.currentTarget ).hasClass("dropup" ) ? 1 : -1, event );
				},
				"mouseup .spinner-handler": "_stop"
			},
			
			_start: function( event ) {
				if ( !this.spinning && this._trigger( "start", event ) === false ) {
					return false;
				}

				if ( !this.counter ) {
					this.counter = 1;
				}
				this.spinning = true;
				return true;
			},
			
			_repeat: function( i, steps, event ) {
				i = i || 500;

				clearTimeout( this.timer );
				this.timer = this._delay(function() {
					this._repeat( 40, steps, event );
				}, i );

				this._spin( steps * this.options.step, event );
			},
			
			_spin: function( step, event ) {
				var value = this.getValue() || 0;

				if ( !this.counter ) {
					this.counter = 1;
				}

				value = this._adjustValue( value + step * this._increment( this.counter ) );

				if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
					this._value( value );
					this.counter++;
				}
			},
			
			_increment: function( i ) {
				var incremental = this.options.incremental;

				if ( incremental ) {
					return $.isFunction( incremental ) ?
						incremental( i ) :
						Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
				}

				return 1;
			},
			
			_precision: function() {
				var precision = this._precisionOf( this.options.step );
				if ( this.options.min !== null ) {
					precision = Math.max( precision, this._precisionOf( this.options.min ) );
				}
				return precision;
			},

			_precisionOf: function( num ) {
				var str = num.toString(),
					decimal = str.indexOf( "." );
				return decimal === -1 ? 0 : str.length - decimal - 1;
			},
			
			_adjustValue: function( value ) {
				var base, aboveMin,
					options = this.options;

				// make sure we're at a valid step
				// - find out where we are relative to the base (min or 0)
				base = options.min !== null ? options.min : 0;
				aboveMin = value - base;
				// - round to the nearest step
				aboveMin = Math.round(aboveMin / options.step) * options.step;
				// - rounding is based on 0, so adjust back to our base
				value = base + aboveMin;

				// fix precision from bad JS floating point math
				value = parseFloat( value.toFixed( this._precision() ) );

				// clamp the value
				if ( options.max !== null && value > options.max) {
					return options.max;
				}
				if ( options.min !== null && value < options.min ) {
					return options.min;
				}

				return value;
			},
			
			_stop: function( event ) {
				if ( !this.spinning ) {
					return;
				}

				clearTimeout( this.timer );
				clearTimeout( this.mousewheelTimer );
				this.counter = 0;
				this.spinning = false;
				this._trigger( "stop", event );
			},
			
			_setOption: function( key, value ) {
				if ( key === "culture" || key === "numberFormat" ) {
					var prevValue = this._parse( this.inputElement.val() );
					this.options[ key ] = value;
					this.inputElement.val( this._format( prevValue ) );
					return;
				}

				if ( key === "max" || key === "min" || key === "step" ) {
					if ( typeof value === "string" ) {
						value = this._parse( value );
					}
				}

				this._super( key, value );

				if ( key === "disabled" ) {
					this.widget().toggleClass( "ui-state-disabled", !!value );
					this.element.prop( "disabled", !!value );
					this.buttons.button( value ? "disable" : "enable" );
				}
			},

			_setOptions: spinner_modifier(function( options ) {
				this._super( options );
			}),
			
			_parse: function( val ) {
				if ( typeof val === "string" && val !== "" ) {
					val = window.Globalize && this.options.numberFormat ?
						Globalize.parseFloat( val, 10, this.options.culture ) : +val;
				}
				return val === "" || isNaN( val ) ? null : val;
			},

			_format: function( value ) {
				if ( value === "" ) {
					return "";
				}
				return window.Globalize && this.options.numberFormat ?
					Globalize.format( value, this.options.numberFormat, this.options.culture ) :
					value;
			},
			
			_refresh: function() {
				this.inputElement.attr({
					"aria-valuemin": this.options.min,
					"aria-valuemax": this.options.max,
					// TODO: what should we do with values that can't be parsed?
					"aria-valuenow": this._parse( this.inputElement.val() )
				});
			},
			
			// update the value without triggering change
			_value: function( value, allowAny ) {
				var parsed;
				if ( value !== "" ) {
					parsed = this._parse( value );
					if ( parsed !== null ) {
						if ( !allowAny ) {
							parsed = this._adjustValue( parsed );
						}
						value = this._format( parsed );
					}
				}
				this.inputElement.val( value );
				this._refresh();
			},
			
			getValue:function(){
				return this._parse( this.inputElement.val() );
			},
			
			setValue:function(value){
				spinner_modifier( this._value ).call( this, newVal );
			},
			
			clear:function(){
				this.inputElement.val('');
			}
			
		}));
		
		function spinner_modifier( fn ) {
			return function() {
				var previous = this.inputElement.val();
				fn.apply( this, arguments );
				this._refresh();
				if ( previous !== this.inputElement.val() ) {
					this._trigger( "change" );
				}
			};
		}
	})(jQuery);


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(1);
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldText",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldInputValidate,{
			
			_defaultHtmls:function(){
				this.element.html('<input type="text" name="'+this.options.property+'" class="form-control textInput value">');
			},
			
			_initAction:function(){
				this._on({
					'change .value':function(){
						this._doChange();
					}
				});
			},
			
			_getValidateParams:function(){
				return {maxlength:this.options.maxLength};
			},
			
			getValue:function(){
				return this.element.find('.value').val();
			},
			
			setValue:function(val){
				return this.element.find('.value').val(val);
			},
			
			clear:function(){
				this.element.find('.textInput.value').val('');
			}
		}));
		
		
	})(jQuery);

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * field组件
	 * Copyright (c) 2009 zhouyi
	 * licenses
	 * doc 
	 */

	__webpack_require__(16);
	(function($) {
		var _log = $.youi.log;
		/**
		 * fieldArea
		 * 
		 */
		$.widget("youi.fieldArea",$.youi.abstractWidget,$.extend({},$.youi.field,{
			_initField:function(){
				
			},
			
			_fieldHtmls:function(){
				var htmls = [];
				var inputWidth = this.options.width - 17;
				htmls.push("<textarea style=\"width:"+(inputWidth)+"px;\" type=\"text\" class=\"textInput value\"></textarea>");
				htmls.push("<div class=\"field-invalid\"></div>");
				return htmls.join('');
			},
			
			setValue:function(value){
				this.element.find('textarea.value').val(value);
			},
			
			getValue:function(){
				return this.element.find('textarea.value').val();
			},
			
			clear:function(){
				this.element.removeClass('validate-success').removeClass('validate-error').removeAttr('title');
				this.element.find('textarea.value').val('');
			},
			
			validate:function(){
				this.element.removeClass('validate-error').removeAttr('title');
				if(!this._validateNotNull()){
					return false;
				}
				
				var value = $.trim(this.getValue());
				
				if(value&&this.options.maxLength&&value.length>this.options.maxLength){
					regMessage = '最大长度不能超过'+this.options.maxLength;
					this._validateError(regMessage);
					return false;
				}
				
				if(value&&this.options.minLength&&value.length<this.options.minLength){
					regMessage = '最小长度不能小于'+this.options.minLength;
					this._validateError(regMessage);
					return false;
				}
			}
			
		}));
		
		$.extend($.youi.fieldArea,{
			defaults:$.extend({},$.youi.fieldDefaults,{
				
			})
		});
	})(jQuery);

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-5-4
	 */
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldTree",$.youi.abstractWidget,$.extend({},$.youi.field,$.youi.fieldSource,{
			/**
			 * 
			 */
			_initField:function(){
				
				var that = this;
				this.element.find('.youi-tree').tree({
					check:this.options.check
				});
			},
			
			/**
			 * 
			 */
			_initAction:function(){
				//
				var onActions =  {
					'click .dropdown-menu':function(event){
						return false;
					}
				};
				
				var nodeSelect = '.treeNode'+'.'+(this.options.selectable||'treeNode')+'>span';
				
				onActions['click '+nodeSelect] = function(event){
					this._setValue(event.currentTarget.parentNode.getAttribute('id'),$(event.currentTarget).text());
				};
				
				this._on(onActions);
			},
			
			
			_defaultHtmls:function(){
				var htmls = [];
				
				var treeHtmls = '<div class="youi-tree"><li class="treeNode root" data-src="'+this.options.src+'"></li></div>';
				
				if(this.options.popup===false){
					htmls.push(treeHtmls);
				}else{
					htmls.push('<span class="form-control textInput" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>');
					htmls.push('<input type="hidden" class="value" name="'+this.options.property+'"/>');
					htmls.push('<div class="input-group-addon" data-toggle="dropdown">	<span class="caret"></span></div>');
					htmls.push('<div class="dropdown-menu" style="width:100%;">');
					htmls.push(treeHtmls);
					htmls.push('</div>');
				}
				
				htmls.push('</div></div>');
				
				this.element.addClass('dropdown input-group').html(htmls.join(''));
			},
			
			_setValue:function(value,show){
				this.element.find('.value').val(value);
				this.element.find('.textInput').text(show||value);
			},
			
			setValue:function(value,show){
				this._setValue(value,show);
			},
			
			getValue:function(){
				if(this.options.check==true){
					var values = [];
					this.element.find('.treeNode.checked').not('.root').each(function(){
						values.push(this.getAttribute('id'));
					});
					return values;
				}else{
					return this.element.find('.value').val();
				}
			},
			
			clear:function(){
				this.element.find('.value').val('');
				this.element.find('.textInput').text('');
				
				if(this.options.check==true){
					this.element.find('.treeNode.checked').removeClass('checked');
					return values;
				}
			}
		}));
	})(jQuery);

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * youi JavaScript Library v3.0.0
	 * 
	 *
	 * Copyright 2016-2020, zhyi_12
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 *
	 * Date: 2016-1-7
	 */
	__webpack_require__(16);
	(function($) {
		
		$.widget("youi.fieldTreeList",$.youi.abstractWidget,$.extend({},$.youi.field,{
			/**
			 * 
			 */
			_initField:function(){
				var that = this;
				this.element.find('.youi-tree:first').tree({
					select:function(event,ui){
						that._listLoad({id:ui.selectedNode.attr('id')});
					}
				});
			},
			
			_listLoad:function(paramObj){
				if(this.options.listSrc){
					var that = this;
					var src = $.youi.pageUtils.parsePageUrl(this.options.listSrc,paramObj);
					
					$.youi.ajaxUtils.ajax({
						url:src,
						success:function(results){
							if(results&&results.records){
								that._parseList(results.records);
							}
						}
					});
				}
			},
			
			_parseList:function(records){
				
				var htmls = [],
					code = this.options.listCode||'code',show = this.options.listShow||'show';
				
				$(records).each(function(){
					htmls.push('<div class="option-item" data-value="'+this[code]+'">'+this[show]+'</div>');
				});
				
				this.element.find('.list-container:first').html(htmls.join(''));
			},
			/**
			 * 
			 */
			_initAction:function(){
				//
				this._on({
					'click .treeNode':function(event){
						return false;
					},
					'click .option-item':function(event){
						var datas = $(event.currentTarget).data();
						this._setValue(datas.value,$(event.currentTarget).text());
					}
				});
			},
			
			_setValue:function(value,show){
				this.element.find('.value').val(value);
				this.element.find('.textInput').text(show||value);
			},
			
			_defaultHtmls:function(){
				var htmls = [];
				
				htmls.push('<span class="form-control textInput" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></span>');
				htmls.push('<input type="hidden" class="value" name="'+this.options.property+'"/>');
				htmls.push('<div class="input-group-addon" data-toggle="dropdown">	<span class="caret"></span></div>');
				htmls.push('<div class="dropdown-menu" style="width:100%;">');
				var treeHtmls = '<div class="youi-tree col-sm-6"><li class="treeNode root" data-src="'+this.options.treeSrc+'"></li></div>';
				
				htmls.push(treeHtmls);
				htmls.push('<div class="col-sm-6 list-container"></div>');
				
				htmls.push('</div>');
				
				htmls.push('</div>');
				
				this.element.addClass('dropdown input-group').html(htmls.join(''));
			},
			
			setValue:function(value,show){
				this._setValue(value,show);
			},
			
			getValue:function(){
				return this.element.find('.value').val();
			},
			
			clear:function(){
				this.element.find('.value').val('');
				this.element.find('.textInput').text('');
			}
		}));
	})(jQuery);

/***/ }
/******/ ]);